/* SCE CONFIDENTIAL
 * PlayStation(R)3 Programmer Tool Runtime Library 360.001
 *                Copyright (C) 2010 Sony Computer Entertainment Inc.
 *                                               All Rights Reserved.
 */

//----------------------------------------------
// bascSample5Fragment.cg
// Per-fragment point light with specular and fog
//----------------------------------------------

void main (float4                  position      : TEXCOORD1,	// Interpolated position from vertex shader
           float3                  normal        : TEXCOORD2,	// Interpolated normal from vertex shader
           float2                  texCoord      : TEXCOORD0,	// Interpolated texture coordinate from vertex shader
		   float				   fogFactor     : TEXCOORD3,   // fog amount from vertex shader
		   
   		   uniform float3		   lightPos,			// light pos in local space
		   uniform float3		   lightCol,			// light color
		   uniform float3		   ambient,				// ambient color
		   uniform float3		   eyePosLocal,			// eye pos in local space
           uniform sampler2D       diffuseMap,			// Diffuse texture map
           
           out float4				oColor      : COLOR)      // Final fragment color
{
float shininess =  17.8954f;   //arbitrary shininess value (could pass as a parameter)
float3 fogColor = {0.3f,0.3f,0.7f}; //aribitrary fog value (could pass as a parameter)

// Normalize the normal
   normal = normalize (normal);

//basic diffuse lighting calcution
	float3 lightDirection = normalize (lightPos - position.xyz);
    float  diffuseLight = max (dot (normal, lightDirection), 0.f);

// Compute the specular lighting term
	float3 eyeDirection = normalize (eyePosLocal - position.xyz);
    float3 halfAngle = normalize (lightDirection + eyeDirection);
    float  specularLight = pow (max (dot (halfAngle, normal), 0.f), shininess);
    if (diffuseLight <= 0.f)
        specularLight = 0.f;

// Compute the fragment color
	float4 texSample = tex2D (diffuseMap, texCoord);
    float3 color   = (texSample.xyz * (diffuseLight+ambient))+ specularLight;

//Compute the fog effect
	oColor.xyz = lerp(fogColor,color.xyz,fogFactor);
    oColor.w = 1.0f;

}
