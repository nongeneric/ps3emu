/*   SCE CONFIDENTIAL                                       */
/*   PlayStation(R)3 Programmer Tool Runtime Library 400.001 */
/*   Copyright (C) 2009 Sony Computer Entertainment Inc.    */
/*   All Rights Reserved.                                   */
/*   File: main.cpp
 *   Description:
 *     simple graphics to show how to use libgcm
 *
 */

#define __CELL_ASSERT__
#include <assert.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/timer.h>
#include <sys/return_code.h>
#include <cell/gcm.h>
#include <stddef.h>
#include <math.h>
#include <algorithm>
#include <sysutil/sysutil_sysparam.h>

#include "snaviutil.h"
#include "gcmutil_error.h"

/* double buffering */
#define COLOR_BUFFER_NUM 2

// For exit routine
static void sysutil_exit_callback(uint64_t status, uint64_t param, void* userdata);
static bool sKeepRunning = true;

using namespace cell::Gcm;

typedef struct
{
	float x, y, z;
	uint32_t rgba; 
} Vertex_t;


/* local memory allocation */
static uint32_t local_mem_heap = 0;
static void *localMemoryAlloc(const uint32_t size) 
{
	uint32_t allocated_size = (size + 1023) & (~1023);
	uint32_t base = local_mem_heap;
	local_mem_heap += allocated_size;
	return (void*)base;
}

static void *localMemoryAlign(const uint32_t alignment, 
		const uint32_t size)
{
	local_mem_heap = (local_mem_heap + alignment-1) & (~(alignment-1));
	return (void*)localMemoryAlloc(size);
}

#define HOST_SIZE (10*1024*1024)

/* prototypes */
extern "C" int32_t userMain(void);

#define CB_SIZE	(0x100000)

#define MB(x) (x * 1024 * 1024)

struct SourceImagePixel {
	uint8_t r;
	uint8_t g;
	uint8_t b;
};

void printBuffer(const uint8_t* buffer, size_t size, unsigned line) {
	for (unsigned i = 0; i < size; i += line) {
		size_t left = std::min(line, size - i);
		for (unsigned j = 0; j < left; ++j) {
			printf("%02x ", buffer[i + j]);
		}
		puts("");
	}
}

void printExpected(const uint8_t* expected, const uint8_t* actual, size_t size, unsigned line = 32) {
	printf("\nexpected buffer:\n");
	printBuffer(expected, size, line);
	printf("\nactual buffer:\n");
	printBuffer(actual, size, line);
	puts("");
}

int userMain(void)
{
	void* host_addr = memalign(10*1024*1024, HOST_SIZE);
	CELL_GCMUTIL_ASSERTS(host_addr != NULL,"memalign()");
	CELL_GCMUTIL_CHECK_ASSERT(cellGcmInit(CB_SIZE, HOST_SIZE, host_addr));

	CellGcmConfig config;
	cellGcmGetConfiguration(&config);
	local_mem_heap = (uint32_t)config.localAddress;

	const uint32_t width = 201;
	const uint32_t height = 100;
	const uint32_t pitch = 201 * 3;
	const uint32_t bytes = 201 * 3 + 1;

	srand(13);
	uint8_t* sourceImage = (uint8_t*)memalign(1024*1024, bytes * height);
	memset(sourceImage, 0, bytes * height);
	for (uint32_t y = 0; y < height; ++y) {
		SourceImagePixel* px = (SourceImagePixel*)&sourceImage[y * bytes];
		for (uint32_t x = 0; x < width; ++x) {
			px[x].r = rand() % 255;
			px[x].g = rand() % 255;
			px[x].b = rand() % 255;
		}
		sourceImage[y * pitch + pitch - 1] = 17;
	}

	void* bufIoEa = memalign(1024*1024, 10*1024*1024);
	uint32_t bufIoOffset;
	CELL_GCMUTIL_CHECK_ASSERT(cellGcmMapMainMemory(bufIoEa, 10*1024*1024, &bufIoOffset));
	void* bufLocalEa = localMemoryAlloc(10*1024*1024);
	uint32_t localOffset;
	CELL_GCMUTIL_CHECK_ASSERT(cellGcmAddressToOffset(bufLocalEa, &localOffset));

	cellGcmInlineTransfer(bufIoOffset, sourceImage + 3, 360, CELL_GCM_LOCATION_MAIN);
	cellGcmInlineTransfer(localOffset, sourceImage + 3, 360, CELL_GCM_LOCATION_LOCAL);

	cellGcmFlush();
	cellGcmFinish(0);

	if (memcmp(sourceImage + 3, bufIoEa, 360 * 4)) {
		printf("cellGcmInlineTransfer to io failed\n");
	}

	if (memcmp(sourceImage + 3, bufLocalEa, 360 * 4)) {
		printf("cellGcmInlineTransfer to local failed\n");
	}

	void* ptr;
	cellGcmSetTransferLocation(CELL_GCM_LOCATION_MAIN);
	cellGcmSetInlineTransferAlignedPointer(bufIoOffset, 1000, &ptr);
	memcpy(ptr, sourceImage + 2, 1000 * 4);

	cellGcmSetTransferLocation(CELL_GCM_LOCATION_LOCAL);
	cellGcmSetInlineTransferAlignedPointer(localOffset, 1000, &ptr);
	memcpy(ptr, sourceImage + 2, 1000 * 4);

	cellGcmFlush();
	cellGcmFinish(100);

	if (memcmp(sourceImage + 2, bufIoEa, 1000 * 4)) {
		printf("cellGcmSetTransferLocation to io failed\n");
	} else {
		printf("success 100\n");
	}

	if (memcmp(sourceImage + 2, bufLocalEa, 1000 * 4)) {
		printf("cellGcmSetTransferLocation to local failed\n");
	} else {
		printf("success 100(2)\n");
	}
	//

	memset(bufIoEa, 0xaa, 2*bytes*height);
	memset(bufLocalEa, 0, 2*bytes*height);

	cellGcmSetTransferData(
		CELL_GCM_TRANSFER_MAIN_TO_LOCAL,
		localOffset,
		8,
		bufIoOffset,
		10,
		12, // number of bytes (aka line length) takes precedence over pitch
		3);

	// every line is 8 in dest, but 12 bytes are written
	// this means the last line is 12 bytes
	// in total 8 + 8 + 12 bytes are written

	cellGcmFlush();
	cellGcmFinish(101);

	uint8_t expected101[] = { 
		0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
		0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
		0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
		0, 0, 0, 0, 0
	};
	if (memcmp(expected101, bufLocalEa, sizeof(expected101))) {
		printf("cellGcmSetTransferData main to local failed (101)\n");
	} else {
		printf("success 101\n");
	}

	//
	memcpy(bufIoEa, sourceImage, bytes*height);
	memset(bufLocalEa, 0xcc, MB(2));

	cellGcmSetTransferData(
		CELL_GCM_TRANSFER_MAIN_TO_LOCAL,
		localOffset,
		2 * width,
		bufIoOffset,
		3 * width,
		bytes,
		3);

	cellGcmFlush();
	cellGcmFinish(200);

	uint8_t expected[] = { 0x25, 0x83, 0x9B, 0x8C, 0x20, 0xFD, 0x7A, 0xBE, 0x51, 0xA3, 0x59, 0x1D, 0x39, 0xFE, 0x28, 0xA6, 0x53, 0xCD, 0x90, 0x18, 0x4C, 0x64, 0x46, 0xE3, 0x89, 0xE0, 0xF3, 0xAC, 0x83, 0x64, 0x79, 0x4A, 0xEC, 0x82, 0xA5, 0x41, 0x0E, 0x88, 0x1E, 0xF7, 0xFA, 0xE4, 0x5E, 0x62, 0xCE, 0x9C, 0xBD, 0x6F, 0xAB, 0x6E, 0x40, 0x7D, 0x96, 0x67, 0x84, 0xA1, 0x11, 0x4D, 0x5B, 0xC6, 0x9A, 0x7F, 0xB7, 0x78, 0xD7, 0x6C, 0x60, 0xC6, 0xD4, 0x3D, 0x57, 0x21, 0x61, 0xBF, 0xDE, 0x16, 0xF6, 0xC5, 0x6F, 0xE4, 0xEB, 0xE0, 0x88, 0x9F, 0x05, 0xDD, 0xB6, 0x14, 0xDB, 0x87, 0x9B, 0xB3, 0x50, 0xBC, 0xF9, 0x2B, 0xF7, 0xBA, 0x9B, 0x5D, 0x9A, 0x59, 0x18, 0x5B, 0x73,    0, 0x94, 0x6F, 0xC4, 0x81, 0x2B, 0x6E, 0xCE, 0xA1, 0xA4, 0xC3, 0x38, 0x2F, 0x8E, 0xA5, 0x5E, 0x12, 0x82, 0x1F, 0xEE, 0xDD, 0x01, 0x60, 0xB0, 0x34, 0x0D, 0xEC, 0x07, 0x11, 0xA1, 0x34, 0x19, 0x7D, 0x9D, 0x10, 0x79, 0x3D, 0x94, 0xAF, 0xE8, 0x3C, 0x4F, 0xBD, 0x75, 0x4D, 0x08, 0xD1, 0x8F, 0x34, 0xEE, 0x28, 0x37, 0x5B, 0xA0, 0x7B, 0x41, 0x5E, 0xB8, 0x77, 0x49, 0x2D, 0xD9, 0xB6, 0xA9, 0xDF, 0xC5, 0x15, 0xFC, 0x09, 0xAD, 0x36, 0x24, 0xF8, 0xF1, 0x4B, 0xA5, 0x4B, 0xEA, 0x6D, 0x1F, 0xCF, 0x0C, 0x80, 0xF2, 0x51, 0xDC, 0x95, 0x71, 0x5F, 0x82, 0x0D, 0xCD, 0xA5, 0x37, 0xC5, 0xDD, 0x4C, 0x95, 0x9F, 0xD5, 0x33, 0x7A, 0x2F, 0x88, 0xDE, 0xE4, 0x29, 0x8D, 0x28, 0xAA, 0x4A, 0xC8, 0x95, 0xE6, 0xFD, 0x3D, 0x2C, 0x23, 0x86, 0xAD, 0x95, 0x1C, 0x7E, 0x10, 0x56, 0xEE, 0x1B, 0x12, 0xBF, 0x6B, 0xCE, 0xB6, 0x8A, 0x1B, 0xB1, 0x2D, 0x63, 0x3A, 0x3E, 0xE9, 0x6A, 0x60, 0x83, 0x5B, 0x09, 0x40, 0x32, 0x07, 0x86, 0x3A, 0x1F, 0x3E, 0x8F, 0xD1, 0xF3, 0xA1, 0x0B, 0xDA, 0xB5, 0xAD, 0xAF, 0x6F, 0x74, 0xE9, 0x80, 0x48, 0x9D, 0x11, 0x8E, 0x05, 0x95, 0x07, 0x0C, 0x78, 0xC0, 0x76, 0x84, 0xF5, 0xF4, 0xEA, 0xA7, 0x1C, 0xC6, 0x9B, 0x82, 0xD6, 0x24, 0x81, 0xF0, 0x0A, 0xDB, 0x3A, 0xE6, 0xBE, 0xD1, 0x3F, 0xCC, 0xA2, 0x58, 0xE0, 0x0B, 0x86, 0xBF, 0x6C, 0x30, 0x21, 0x04, 0x58, 0x74, 0x13, 0x7D, 0x45, 0x47, 0xBE, 0x8C, 0xC6, 0xC5, 0x9F, 0x0C, 0x0B, 0x10, 0x61, 0x2E, 0xC7, 0xA9, 0x31, 0x70, 0xC0, 0xE0, 0x0D, 0x38, 0xEF, 0x6B, 0x7F, 0x49, 0x4B, 0xB6, 0xC8, 0x94, 0xBC, 0x19, 0x24, 0x1C, 0x7C, 0x53, 0x4A, 0xFD, 0x1D, 0x9F, 0xEC, 0x39, 0x04, 0x88, 0x92, 0x55, 0x8F, 0x79, 0x24, 0x80, 0x5A, 0x13, 0x68, 0x3D, 0xF5, 0x7C, 0x60, 0x86, 0xEE, 0xD4, 0x70, 0x84, 0x0B, 0x81, 0xDF, 0xA9, 0x7E, 0xDD, 0xA7, 0x68, 0x5D, 0x16, 0x8D, 0x5B, 0xEA, 0x89, 0x38, 0x83, 0x92, 0xC9, 0xB8, 0x63, 0x0C, 0x43, 0x9B, 0xF3, 0xC2, 0x67,    0, 0xB6, 0xF0, 0x0C, 0x3B, 0xDF, 0xB9, 0x7B, 0x14, 0xC1, 0x1D, 0x40, 0xEC, 0x19, 0x62, 0x14, 0xE4, 0xF5, 0xAB, 0x3D, 0xF9, 0x87, 0x75, 0xFD, 0x96, 0x2E, 0xCE, 0x9F, 0x56, 0x1E, 0xD6, 0x3F, 0xF2, 0xA0, 0xE9, 0x91, 0xC2, 0x8A, 0xC8, 0x79, 0xC3, 0x08, 0x47, 0x3C, 0xC8, 0x93, 0xCB, 0xE6, 0x59, 0x84, 0x79, 0xB1, 0x6C, 0x2A, 0xD3, 0x10, 0xFE, 0xC2, 0x80, 0x93, 0xCA, 0x67, 0x22, 0xD7, 0x1F, 0xFE, 0x2A, 0xD8, 0xB1, 0x87, 0x6C, 0xF1, 0x57, 0x2E, 0x75, 0x0E, 0x0C, 0xA0, 0x3B, 0xDC, 0x6D, 0x50, 0x32, 0x98, 0x52, 0x7C, 0x8C, 0x95, 0x7B, 0x49, 0xF5, 0xB3, 0x42, 0x6A, 0x1E, 0x10, 0xF5, 0x71, 0xC8, 0xF3, 0x0A, 0x13, 0x8E, 0x4D, 0xC5, 0xE0, 0xAC, 0xD0, 0x17, 0x61, 0xC3, 0x5A, 0xB1, 0x02, 0xA6, 0x1B, 0x50, 0xCB, 0xEF, 0xF1, 0xBD, 0xAF, 0x7A, 0x36, 0x93, 0x67, 0x1B, 0x49, 0xB2, 0x75, 0xC8, 0x4F, 0x75, 0x81, 0xCE, 0xC7, 0x16, 0xA0, 0xB7, 0x9F, 0x03, 0x52, 0x62, 0x2D, 0x7F, 0x91, 0x62, 0x23, 0xBF, 0x05, 0xFC, 0x06, 0x2C, 0x5D, 0x22, 0x30, 0x0F, 0x34, 0x0E, 0xE3, 0xB0, 0x0C, 0x60, 0x9C, 0xD3, 0x70, 0x5D, 0x54, 0xB1, 0x4A, 0xD1, 0x3D, 0xBB, 0xD9, 0x01, 0xAC, 0x0A, 0x0C, 0xFC, 0x5C, 0x94, 0x76, 0x8C, 0x45, 0xF8, 0x7D, 0x67, 0x89, 0x3E, 0x19, 0x1D, 0xD4, 0xE3, 0x83, 0x04, 0x35, 0x19, 0xB9, 0x32, 0xB1, 0xAC, 0x7E, 0x4E, 0x22, 0xEA, 0x8C, 0x46, 0xB3, 0x27, 0xB9, 0xBA, 0x41, 0x72, 0xCF, 0x03, 0xE1, 0x46, 0x60, 0x1E, 0x6C, 0x32, 0x26, 0xDC, 0xC2, 0x13, 0x5F, 0x06, 0xC3, 0x71, 0xF3, 0xCC, 0x6E, 0xEB, 0x98, 0x8B, 0x3C, 0xE3, 0x65, 0x1B, 0x6C, 0xD2,    0, 0x1E, 0xED, 0x2C, 0xC5, 0xB1, 0xF9, 0x61, 0x44, 0x7C, 0x3A, 0xE2, 0xD4, 0xCD, 0xAA, 0xCC, 0xC3, 0x27, 0xD1, 0xB5, 0x10, 0xD4, 0xC6, 0xBB, 0xB9, 0x83, 0xB0, 0x55, 0x14, 0x61, 0x7F, 0x51, 0x42, 0x91, 0xAA, 
0xDB, 0xA3, 0x07, 0x45, 0x92, 0xAF, 0xF0, 0xB3, 0xCC, 0x55, 0x2A, 0xF1, 0xFD, 0x7B, 0xD0, 0xA3, 0x11, 0xE0, 0x58, 0xE3, 0xA1, 0x06, 0xBF, 0x68, 0xF4, 0xF0, 0x9D, 0xE2, 0xA3, 0x45, 0x84, 0xB4, 0xD1, 0xDC, 0x2D, 0xD8, 0x8D, 0x28, 0x60, 0x75, 0xB8, 0xAC, 0x79, 0xB1, 0x9D, 0x02, 0xD0, 0xCE, 0x49, 0xE2, 0x7D, 0x0D, 0x8B, 0x10, 0x12, 0x28, 0xBF, 0xC6, 0x46, 0x51, 0x3E, 0x90, 0x9C, 0xCA, 0xE5, 0x9E, 0xDB, 0xE9, 0xEA, 0x31, 0x5A, 0x35, 0x44, 0xC1, 0xD5, 0x77, 0x8B, 0x14, 0xDA, 0xA1, 0x31, 0x94, 0x68, 0xE1, 0x0A, 0xCD, 0x2A, 0x77, 0xF9, 0xE4, 0x96, 0x05, 0x9A, 0xAC, 0xD8, 0xF6, 0xD1, 0xD1, 0x26, 0x52, 0x79, 0x7B, 0x21, 0x4E, 0x66, 0xCC, 0x7C, 0xC4, 0xE1, 0x6F, 0xA5, 0x93, 0x66, 0x29, 0xC5, 0x8B, 0xA9, 0xAB, 0x4E, 0x9F, 0xDF, 0x1D, 0x83, 0xAD, 0xB4, 0x24, 0x39,    0, 0x0C, 0x12, 0x73, 0x97, 0x42, 0xF1, 0x8C, 0x46, 0x99, 0x4A, 0xAD, 0x3F, 0xBD, 0x87, 0xE6, 0xF5, 0xE3, 0x0E, 0x98, 0x74, 0x08, 0x47, 0x4B, 0x05, 0xE7, 0xA0, 0xA0, 0x1F, 0x90, 0x2D, 0x67, 0xD0, 0x5F, 0x09, 0x82, 0x7A, 0xCA, 0x01, 0xBF, 0xFE, 0x1D, 0x2A, 0x15, 0xC2, 0xF6, 0xE4, 0x0A, 0x3C, 0xFB, 0x10, 0x06, 0x36, 0xA2, 0x59, 0x56, 0x01, 0x13, 0x8B, 0x0C, 0xB8, 0x43, 0x18, 0xAC, 0x7E, 0x65, 0x45, 0xF7, 0xC6, 0xBE, 0x4A, 0x6E, 0xE9, 0x02, 0xCB, 0x3E, 0xB4, 0x36, 0xF1, 0xA3, 0x30, 0xBC, 0xEE, 0x24, 0x68, 0xA2, 0x17, 0xB1, 0x89, 0x50, 0x8A, 0x23, 0xE6, 0xD9, 0xF2, 0xB3, 0x57, 0x54, 0xC8, 0x95, 0xB6, 0xFC, 0x71, 0x7C, 0x7B, 0xF5, 0xBA, 0x1C, 0x43, 0x36, 0x01, 0x54, 0x16, 0x5C, 0x37, 0x92, 0xAA, 0x12, 0x51, 0xF3, 0x7A, 0xDF, 0xD2, 0x95, 0x45, 0xF4, 0xBE, 0x5A, 0xDB, 0xC8, 0x0B, 0x2D, 0xEC, 0xEA, 0xE7, 0x5D, 0x89, 0x9B, 0xF0, 0x73, 0x82, 0x1B, 0x46, 0x3B, 0xD4, 0xF7, 0xD1, 0xE6, 0x01, 0x78, 0x73, 0xD3, 0xA1, 0x7A, 0xD5, 0x17, 0xAF, 0x15, 0x26, 0x27, 0x73, 0x38, 0x9F, 0x6A, 0x64, 0xD7, 0xF1, 0x95, 0x07, 0x30, 0x46, 0x74, 0x6B, 0x0D, 0xB1, 0x78, 0xBF, 0xDF, 0x86, 0xF0, 0x79, 0x25, 0x87, 0x74, 0x2E, 0x4E, 0x82, 0x63, 0x6B, 0x3C, 0xEB, 0x82, 0x23, 0xF2, 0x62, 0x54, 0xA1, 0x28, 0x4D, 0xE6, 0x7F, 0x9D, 0x46, 0x85, 0xFB, 0xAB, 0xDE, 0xB0, 0xAE, 0xCA, 0xCD, 0x44, 0x7E, 0xEA, 0x9E, 0xE6, 0x78, 0x67, 0x42, 0x88, 0xB0, 0xC8, 0x87, 0xA0, 0xEC, 0x6A, 0x80, 0xD7, 0x6F, 0x4B, 0xE4, 0x8F, 0xEC, 0x1B, 0x57, 0x8E, 0xA5, 0xE9, 0x0E, 0x8D, 0x70, 0xA1, 0x4D, 0xC5, 0xE2, 0x18, 0xB0, 0xAA, 0x42, 0x29, 0xD6, 0xDD, 0xF1, 0x05, 0x1B, 0x51, 0x18, 0x06, 0x76, 0xFB, 0x60, 0x4B, 0xCF, 0x39, 0x64, 0xFD, 0x8F, 0x66, 0xBB, 0x8E, 0x16, 0xD1, 0xC5, 0xBE, 0x9B, 0x1B, 0xE6, 0x6D, 0xA2, 0x4C, 0xE4, 0x6C, 0x18, 0xDF, 0xDD, 0x8F, 0x1A, 0xAC, 0x17, 0xFA, 0x1B, 0xE5, 0x4A, 0x7F, 0x5D, 0x69, 0x3A, 0x8A, 0xF7, 0x19, 0x68, 0x86, 0x7B, 0xF8, 0xF0, 0x45, 0xEC, 0x92, 0x6C, 0x35, 0x70, 0x07, 0x46, 0x4D, 0x69, 0x96, 0xA2, 0x7C, 0x3B, 0x60, 0xE3, 0xD0, 0x1D, 0x6A, 0xAF, 0x51, 0x1C, 0xA0, 0x9F, 0x52, 0xD1, 0x58, 0x34, 0xDA, 0x7F, 0x7B, 0x5A, 0x45, 0x6B, 0x09, 0xD0, 0x62, 0xF3, 0x8C, 0x04, 0x35, 0xC4, 0x6A, 0xBB, 0x77, 0x65, 0x1E, 0xCC, 0xEA, 0x26, 0x6B, 0xAE, 0xDF, 0xC5, 0xFC, 0xDB, 0x92, 0x11, 0xCA, 0xDD, 0xB8, 0xCD, 0x84, 0x9D, 0x40, 0x84, 0x73, 0x3C, 0x59, 0xA6, 0x1F, 0x16, 0x0E, 0x3F, 0x70, 0x43, 0x62, 0x35, 0xF7, 0xB6, 0x94, 0x25, 0x5F, 0xA6, 0xE3, 0x8D, 0x93, 0xE1, 0xD0, 0x8C, 0xC1, 0x67, 0x32, 0x62, 0x13, 0x9F, 0x07, 0xEF, 0x93, 0xA5, 0xD2, 0x51, 0x9A, 0x1A, 0x05, 0x95, 0x5F, 0xF9, 0x45, 0xBA, 0xCC, 0x17, 0x01, 0x84, 0xA8, 0xA9, 0xD0, 0x0B, 0x67, 0xAD, 0x65, 0x40, 0xDF, 0x41, 0xC8, 0x25, 0xA8, 0x07, 0x38, 0xBB, 0x8D, 0xD3, 0x42, 0xA6, 0x4F, 0x02, 0xF5, 0xFE, 0x11, 0xF6, 0xA1, 0x60, 0x43, 0x0A, 0x0E, 0x63, 0xFA, 0x49, 0xED, 0xE2, 0x37, 0x89, 0xD6, 0xA9, 0xEB, 0xBD, 0xC7, 0xBE, 0xEB, 0x6F, 0x2D, 0x64, 0xD1, 0x5D, 0xC4, 0x19, 0x13, 0x62, 0x1D, 0x84, 0xC5, 0x0B, 0x3B, 0x0B, 0xEB, 0x3B, 0x08, 0x33, 0x72, 0xD5, 0x7F, 0x69, 0x23, 0x4E, 0xA3, 0x73, 0x61, 0x6E, 0x85, 0x7D, 0x4D, 0x24, 0xAA, 0x1B, 0xD3, 0x0B, 0x28, 0xAC, 0x6F, 0xEF, 0xE1, 0xB7, 0x96, 0x77, 0xB1, 0xF6, 0x0A, 0x7C, 0x9F, 0xD4, 0x70, 0x33, 0x61, 0x17, 0x09, 0x42, 0x20, 0x1E, 0xD3, 0x45, 0x57, 0xFC, 0x15, 0x15, 0xAC, 0x86, 0x4F, 0x6F, 0xD8, 0xB8,    0, 0x6F, 0x12, 0xDE, 0x11, 0x7C, 0x96, 0x4D, 0x99, 0x0C, 0x21, 0x99, 0x55, 0x82, 0xE7, 0x4C, 0xC7, 0x48, 0x0C, 0xA1, 
0x30, 0x93, 0x61, 0x5E, 0x4C, 0xE7, 0x19, 0xCF, 0x4E, 0x16, 0xC1, 0xF1, 0x6E, 0x69, 0x5F, 0x30, 0x1F, 0x90, 0x48, 0x6C, 0x78, 0x21, 0x83, 0xEB, 0xE3, 0x9D, 0x37, 0xE4, 0xD4, 0x9A, 0x1D, 0x6C, 0x94, 0xC0, 0xA2, 0xA3,    0, 0x68, 0x59, 0xCB, 0xE4, 0x93, 0x50, 0xA3, 0x85, 0xC9, 0x11, 0x5A, 0xCC, 0xCC, 0xCC, 0xCC };
	if (memcmp(expected, bufLocalEa, sizeof(expected))) {
		printf("cellGcmSetTransferData main to local failed\n");
	}
	 else {
		printf("success 200\n");
	}

	memset(bufIoEa, 0xdd, MB(2));

	cellGcmSetTransferData(
		CELL_GCM_TRANSFER_LOCAL_TO_MAIN,
		bufIoOffset,
		4 * width,
		localOffset,
		1 * width,
		133,
		3);

	cellGcmFlush();
	cellGcmFinish(300);

	uint8_t expected2[] = { 0x25, 0x83, 0x9B, 0x8C, 0x20, 0xFD, 0x7A, 0xBE, 0x51, 0xA3, 0x59, 0x1D, 0x39, 0xFE, 0x28, 0xA6, 0x53, 0xCD, 0x90, 0x18, 0x4C, 0x64, 0x46, 0xE3, 0x89, 0xE0, 0xF3, 0xAC, 0x83, 0x64, 0x79, 0x4A, 0xEC, 0x82, 0xA5, 0x41, 0x0E, 0x88, 0x1E, 0xF7, 0xFA, 0xE4, 0x5E, 0x62, 0xCE, 0x9C, 0xBD, 0x6F, 0xAB, 0x6E, 0x40, 0x7D, 0x96, 0x67, 0x84, 0xA1, 0x11, 0x4D, 0x5B, 0xC6, 0x9A, 0x7F, 0xB7, 0x78, 0xD7, 0x6C, 0x60, 0xC6, 0xD4, 0x3D, 0x57, 0x21, 0x61, 0xBF, 0xDE, 0x16, 0xF6, 0xC5, 0x6F, 0xE4, 0xEB, 0xE0, 0x88, 0x9F, 0x05, 0xDD, 0xB6, 0x14, 0xDB, 0x87, 0x9B, 0xB3, 0x50, 0xBC, 0xF9, 0x2B, 0xF7, 0xBA, 0x9B, 0x5D, 0x9A, 0x59, 0x18, 0x5B, 0x73,    0, 0x94, 0x6F, 0xC4, 0x81, 0x2B, 0x6E, 0xCE, 0xA1, 0xA4, 0xC3, 0x38, 0x2F, 0x8E, 0xA5, 0x5E, 0x12, 0x82, 0x1F, 0xEE, 0xDD, 0x01, 0x60, 0xB0, 0x34, 0x0D, 0xEC, 0x07, 0xDD, 0xDD, 0xDD, 0xDD };
	if (memcmp(expected2, bufIoEa, sizeof(expected2))) {
		printf("cellGcmSetTransferData local to main failed\n");
	} else {
		printf("success 300\n");
	}

	cellGcmSetTransferData(
		CELL_GCM_TRANSFER_MAIN_TO_MAIN,
		bufIoOffset,
		1 * width,
		bufIoOffset,
		4 * width,
		200,
		7);

	cellGcmFlush();
	cellGcmFinish(400);

	uint8_t expected3[] = { 0x25, 0x83, 0x9B, 0x8C, 0x20, 0xFD, 0x7A, 0xBE, 0x51, 0xA3, 0x59, 0x1D, 0x39, 0xFE, 0x28, 0xA6, 0x53, 0xCD, 0x90, 0x18, 0x4C, 0x64, 0x46, 0xE3, 0x89, 0xE0, 0xF3, 0xAC, 0x83, 0x64, 0x79, 0x4A, 0xEC, 0x82, 0xA5, 0x41, 0x0E, 0x88, 0x1E, 0xF7, 0xFA, 0xE4, 0x5E, 0x62, 0xCE, 0x9C, 0xBD, 0x6F, 0xAB, 0x6E, 0x40, 0x7D, 0x96, 0x67, 0x84, 0xA1, 0x11, 0x4D, 0x5B, 0xC6, 0x9A, 0x7F, 0xB7, 0x78, 0xD7, 0x6C, 0x60, 0xC6, 0xD4, 0x3D, 0x57, 0x21, 0x61, 0xBF, 0xDE, 0x16, 0xF6, 0xC5, 0x6F, 0xE4, 0xEB, 0xE0, 0x88, 0x9F, 0x05, 0xDD, 0xB6, 0x14, 0xDB, 0x87, 0x9B, 0xB3, 0x50, 0xBC, 0xF9, 0x2B, 0xF7, 0xBA, 0x9B, 0x5D, 0x9A, 0x59, 0x18, 0x5B, 0x73,    0, 0x94, 0x6F, 0xC4, 0x81, 0x2B, 0x6E, 0xCE, 0xA1, 0xA4, 0xC3, 0x38, 0x2F, 0x8E, 0xA5, 0x5E, 0x12, 0x82, 0x1F, 0xEE, 0xDD, 0x01, 0x60, 0xB0, 0x34, 0x0D, 0xEC, 0x07, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0x4C, 0x95, 0x9F, 0xD5, 0x33, 0x7A, 0x2F, 0x88, 0xDE, 0xE4, 0x29, 0x8D, 0x28, 0xAA, 0x4A, 0xC8, 0x95, 0xE6, 0xFD, 0x3D, 0x2C, 0x23, 0x86, 0xAD, 0x95, 0x1C, 0x7E, 0x10, 0x56, 0xEE, 0x1B, 0x12, 0xBF, 0x6B, 0xCE, 0xB6, 0x8A, 0x1B, 0xB1, 0x2D, 0x63, 0x3A, 0x3E, 0xE9, 0x6A, 0x60, 0x83, 0x5B, 0x09, 0x40, 0x32, 0x07, 0x86, 0x3A, 0x1F, 0x3E, 0x8F, 0xD1, 0xF3, 0xA1, 0x0B, 0xDA, 0xB5, 0xAD, 0xAF, 0x6F, 0x74, 0xE9, 0x80, 0x48, 0x9D, 0x11, 0x8E, 0x05, 0x95, 0x07, 0x0C, 0x78, 0xC0, 0x76, 0x84, 0xF5, 0xF4, 0xEA, 0xA7, 0x1C, 0xC6, 0x9B, 0x82, 0xD6, 0x24, 0x81, 0xF0, 0x0A, 0xDB, 0x3A, 0xE6, 0xBE, 0xD1, 0x3F, 0xCC, 0xA2, 0x58, 0xE0, 0x0B, 0x86, 0xBF, 0x6C, 0x30, 0x21, 0x04, 0x58, 0x74, 0x13, 0x7D, 0x45, 0x47, 0xBE, 0x8C, 0xC6, 0xC5, 0x9F, 0x0C, 0x0B, 0x10, 0x61, 0x2E, 0xC7, 0xA9, 0x31, 0x70, 0xC0, 0xE0, 0xDD, 0xDD, 0xDD, 0xDD };
	if (memcmp(expected3, bufIoEa, sizeof(expected3))) {
		printf("cellGcmSetTransferData main to main failed\n");
	} else {
		printf("success 400\n");
	}

	memcpy(bufIoEa, sourceImage, bytes*height);
	memset(bufLocalEa, 0xbb, MB(1));

	cellGcmSetTransferDataMode(CELL_GCM_TRANSFER_MAIN_TO_LOCAL);
	cellGcmSetTransferLocation(CELL_GCM_LOCATION_MAIN);
	cellGcmSetTransferDataFormat(230, 199, 230/4, 5, 1, 2);
	cellGcmSetTransferDataOffset(localOffset, bufIoOffset);

	cellGcmFlush();
	cellGcmFinish(500);

	uint8_t expected4[] = { 0x25, 0xBB, 0x83, 0xBB, 0x9B, 0xBB, 0x8C, 0xBB, 0x20, 0xBB, 0xFD, 0xBB, 0x7A, 0xBB, 0xBE, 0xBB, 0x51, 0xBB, 0xA3, 0xBB, 0x59, 0xBB, 0x1D, 0xBB, 0x39, 0xBB, 0xFE, 0xBB, 0x28, 0xBB, 0xA6, 0xBB, 0x53, 0xBB, 0xCD, 0xBB, 0x90, 0xBB, 0x18, 0xBB, 0x4C, 0xBB, 0x64, 0xBB, 0x46, 0xBB, 0xE3, 0xBB, 0x89, 0xBB, 0xE0, 0xBB, 0xF3, 0xBB, 0xAC, 0xBB, 0x83, 0xBB, 0x64, 0xBB, 0x79, 0xBB, 0x4A, 0xBB, 0xEC, 0xBB, 0x82, 0xBB, 0xA5, 0xBB, 0x41, 0xBB, 0x0E, 0xBB, 0x88, 0xBB, 0x1E, 0xBB, 0xF7, 0xBB, 0xFA, 0xBB, 0xE4, 0xBB, 0x5E, 0xBB, 0x62, 0xBB, 0xCE, 0xBB, 0x9C, 0xBB, 0xBD, 0xBB, 0x6F, 0xBB, 0xAB, 0xBB, 0x6E, 0xBB, 0x40, 0xBB, 0x7D, 0xBB, 0x96, 0xBB, 0x67, 0xBB, 0x84, 0xBB, 0xA1, 0xBB, 0x11, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xEE, 0xBB, 0x1B, 0xBB, 0x12, 0xBB, 0xBF, 0xBB, 0x6B, 0xBB, 0xCE, 0xBB, 0xB6, 0xBB, 0x8A, 0xBB, 0x1B, 0xBB, 0xB1, 0xBB, 0x2D, 0xBB, 0x63, 0xBB, 0x3A, 0xBB, 0x3E, 0xBB, 0xE9, 0xBB, 0x6A, 0xBB, 0x60, 0xBB, 0x83, 0xBB, 0x5B, 0xBB, 0x09, 0xBB, 0x40, 0xBB, 0x32, 0xBB, 0x07, 0xBB, 0x86, 0xBB, 0x3A, 0xBB, 0x1F, 0xBB, 0x3E, 0xBB, 0x8F, 0xBB, 0xD1, 0xBB, 0xF3, 0xBB, 0xA1, 0xBB, 0x0B, 0xBB, 0xDA, 0xBB, 0xB5, 0xBB, 0xAD, 0xBB, 0xAF, 0xBB, 0x6F, 0xBB, 0x74, 0xBB, 0xE9, 0xBB, 0x80, 0xBB, 0x48, 0xBB, 0x9D, 0xBB, 0x11, 0xBB, 0x8E, 0xBB, 0x05, 0xBB, 0x95, 0xBB, 0x07, 0xBB, 0x0C, 0xBB, 0x78, 0xBB, 0xC0, 0xBB, 0x76, 0xBB, 0x84, 0xBB, 0xF5, 0xBB, 0xF4, 0xBB, 0xEA, 0xBB, 0xA7, 0xBB, 0x1C, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0x56, 0xBB, 0xD9, 0xBB, 0x0A, 0xBB, 0x15, 0xBB, 0x32, 0xBB, 0xE1, 0xBB, 0xF3, 0xBB, 0x30, 0xBB, 0x41, 0xBB, 0x1F, 0xBB, 0xC4, 0xBB, 0x7F, 0xBB, 0xEB, 0xBB, 0xF8, 0xBB, 0x68, 0xBB, 0x2B, 0xBB, 0x5F, 0xBB, 0xBE, 0xBB, 0x9C, 0xBB, 0xEE, 0xBB, 0x81, 0xBB, 0xCF, 0xBB, 0xDE, 0xBB, 0x42, 0xBB, 0x71, 0xBB, 0x4A, 0xBB, 0x03, 0xBB, 0x74, 0xBB, 0x19, 0xBB, 0x0A, 0xBB, 0x9D, 0xBB, 0x15, 0xBB, 0x2B, 0xBB, 0x16, 0xBB, 0xFC, 0xBB, 0xB5, 0xBB, 0x9C, 0xBB, 0x73, 0xBB, 0x8D, 0xBB, 0x8A, 0xBB, 0x1A, 0xBB, 0x48, 0xBB, 0x1D, 0xBB, 0x98, 0xBB, 0x84, 0xBB, 0xDD, 0xBB, 0xDB, 0xBB, 0xCD, 0xBB, 0x25, 0xBB, 0x0A, 0xBB, 0x0E, 0xBB, 0x36, 0xBB, 0x17, 0xBB, 0xD5, 0xBB, 0x6B, 0xBB, 0x20, 0xBB, 0x9A, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0x95, 0xBB, 0x7B, 0xBB, 0x49, 0xBB, 0xF5, 0xBB, 0xB3, 0xBB, 0x42, 0xBB, 0x6A, 0xBB, 0x1E, 0xBB, 0x10, 0xBB, 0xF5, 0xBB, 0x71, 0xBB, 0xC8, 0xBB, 0xF3, 0xBB, 0x0A, 0xBB, 0x13, 0xBB, 0x8E, 0xBB, 0x4D, 0xBB, 0xC5, 0xBB, 0xE0, 0xBB, 0xAC, 0xBB, 0xD0, 0xBB, 0x17, 0xBB, 0x61, 0xBB, 0xC3, 0xBB, 0x5A, 0xBB, 0xB1, 0xBB, 0x02, 0xBB, 0xA6, 0xBB, 0x1B, 0xBB, 0x50, 0xBB, 0xCB, 0xBB, 0xEF, 0xBB, 0xF1, 0xBB, 0xBD, 0xBB, 0xAF, 0xBB, 0x7A, 0xBB, 0x36, 0xBB, 0x93, 0xBB, 0x67, 0xBB, 0x1B, 0xBB, 0x49, 
0xBB, 0xB2, 0xBB, 0x75, 0xBB, 0xC8, 0xBB, 0x4F, 0xBB, 0x75, 0xBB, 0x81, 0xBB, 0xCE, 0xBB, 0xC7, 0xBB, 0x16, 0xBB, 0xA0, 0xBB, 0xB7, 0xBB, 0x9F, 0xBB, 0x03, 0xBB, 0x52, 0xBB, 0x62, 0xBB, 0x2D, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xAC, 0xBB, 0x79, 0xBB, 0xB1, 0xBB, 0x9D, 0xBB, 0x02, 0xBB, 0xD0, 0xBB, 0xCE, 0xBB, 0x49, 0xBB, 0xE2, 0xBB, 0x7D, 0xBB, 0x0D, 0xBB, 0x8B, 0xBB, 0x10, 0xBB, 0x12, 0xBB, 0x28, 0xBB, 0xBF, 0xBB, 0xC6, 0xBB, 0x46, 0xBB, 0x51, 0xBB, 0x3E, 0xBB, 0x90, 0xBB, 0x9C, 0xBB, 0xCA, 0xBB, 0xE5, 0xBB, 0x9E, 0xBB, 0xDB, 0xBB, 0xE9, 0xBB, 0xEA, 0xBB, 0x31, 0xBB, 0x5A, 0xBB, 0x35, 0xBB, 0x44, 0xBB, 0xC1, 0xBB, 0xD5, 0xBB, 0x77, 0xBB, 0x8B, 0xBB, 0x14, 0xBB, 0xDA, 0xBB, 0xA1, 0xBB, 0x31, 0xBB, 0x94, 0xBB, 0x68, 0xBB, 0xE1, 0xBB, 0x0A, 0xBB, 0xCD, 0xBB, 0x2A, 0xBB, 0x77, 0xBB, 0xF9, 0xBB, 0xE4, 0xBB, 0x96, 0xBB, 0x05, 0xBB, 0x9A, 0xBB, 0xAC, 0xBB, 0xD8, 0xBB, 0xF6, 0xBB, 0xD1, 0xBB, 0xD1, 0xBB, 0xBB, 0xBB, 0xBB };
	if (memcmp(expected4, bufLocalEa, sizeof(expected4))) {
		printExpected(expected4, (uint8_t*)bufLocalEa, sizeof(expected4));
		printf("cellGcmSetTransferDataOffset main to local failed\n");
	} else {
		printf("success 500\n");
	}

	//

	uint8_t simpleImage[] = {
		0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x10, 0xcc, 0xcc,
		0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x20, 0xcc, 0xcc,
		0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x30, 0xcc, 0xcc,
		0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x40, 0xcc, 0xcc,
	};

	memset(bufIoEa, 0, 2*bytes*height);
	memcpy(bufLocalEa, simpleImage, sizeof(simpleImage));

	cellGcmSetTransferImage(
		CELL_GCM_TRANSFER_LOCAL_TO_MAIN,
		bufIoOffset, 64,
		1, 2,
		localOffset, 12,
		1, 1,
		4, 3,
		2);

	cellGcmFlush();
	cellGcmFinish(600);
	
	uint8_t expected600[] = {
		0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
		0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
		0,    0, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x20,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
		0,    0, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x30,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
		0,    0, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x40,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	};
	if (memcmp(expected600, bufIoEa, sizeof(expected600))) {
		printExpected(expected600, (uint8_t*)bufIoEa, sizeof(expected600), 64);
		printf("cellGcmSetTransferImage local to main failed (600)\n");
	} else {
		printf("success 600\n");
	}

	//

	memset(bufIoEa, 0, 2*bytes*height);
	memcpy(bufLocalEa, simpleImage, sizeof(simpleImage));

	cellGcmSetConvertSwizzleFormat(
		bufIoOffset, // dest
		2, // swizzled width
		2, // swizzled height
		0, // swizzled x
		0, // swizzled y
		localOffset, // source
		12, // src pitch
		0, // src x 
		0, // src y
		6, // src width
		4, // src height
		2, // bytes per pixel
		CELL_GCM_TRANSFER_LOCAL_TO_MAIN);

	cellGcmFlush();
	cellGcmFinish(601);
	
	uint8_t expected601[] = {
		0x01, 0x02,  0x03, 0x04,
		0x11, 0x12,  0x13, 0x14,
		0x21, 0x22,  0x23, 0x24,
		0x31, 0x32,  0x33, 0x34
	};
	if (memcmp(expected601, bufIoEa, sizeof(expected601))) {
		printExpected(expected601, (uint8_t*)bufIoEa, sizeof(expected601));
		printf("cellGcmSetConvertSwizzleFormat local to main failed (601)\n");
	} else {
		printf("success 601\n");
	}

	//

	memset(bufIoEa, 0, 2*bytes*height);
	memcpy(bufLocalEa, simpleImage, sizeof(simpleImage));
	
	cellGcmSetConvertSwizzleFormat(
		bufIoOffset, // dest
		4, // swizzled width
		4, // swizzled height
		0, // swizzled x
		0, // swizzled y
		localOffset, // source
		8, // src pitch
		0, // src x 
		0, // src y
		4, // src width
		4, // src height
		2, // bytes per pixel
		CELL_GCM_TRANSFER_LOCAL_TO_MAIN);

	cellGcmFlush();
	cellGcmFinish(700);
	
	uint8_t expected700[] = {
		0x01, 0x02, 0x03, 0x04,  0x09, 0x10, 0xCC, 0xCC, 
		0x05, 0x06, 0x07, 0x08,  0x11, 0x12, 0x13, 0x14, 

		0x15, 0x16, 0x17, 0x18,  0x21, 0x22, 0x23, 0x24, 
		0x19, 0x20, 0xCC, 0xCC,  0x25, 0x26, 0x27, 0x28
	};
	if (memcmp(expected700, bufIoEa, sizeof(expected700))) {
		printExpected(expected700, (uint8_t*)bufIoEa, sizeof(expected700), 8);
		printf("cellGcmSetConvertSwizzleFormat local to main failed (700)\n");
	} else {
		printf("success 700\n");
	}

	//

	memset(bufIoEa, 0, 2*bytes*height);
	for (int i = 0; i < 1500; ++i) {
		*((uint8_t*)bufLocalEa + i) = i;
	}
	
	cellGcmSetConvertSwizzleFormat(
		bufIoOffset, // dest
		4, // swizzled width
		4, // swizzled height
		0, // swizzled x
		0, // swizzled y
		localOffset, // source
		8, // src pitch
		2, // src x 
		2, // src y
		4, // src width
		4, // src height
		2, // bytes per pixel
		CELL_GCM_TRANSFER_LOCAL_TO_MAIN);

	cellGcmFlush();
	cellGcmFinish(800);
	
	uint8_t expected800[] = {
		0x14, 0x15, 0x16, 0x17,  0x1C, 0x1D, 0x1E, 0x1F, 
		0x18, 0x19, 0x1A, 0x1B,  0x20, 0x21, 0x22, 0x23, 
		
		0x24, 0x25, 0x26, 0x27,  0x2C, 0x2D, 0x2E, 0x2F,
		0x28, 0x29, 0x2A, 0x2B,  0x30, 0x31, 0x32, 0x33
	};
	if (memcmp(expected800, bufIoEa, sizeof(expected800))) {
		printf("cellGcmSetConvertSwizzleFormat local to main failed (800)\n");
	} else {
		printf("success 800\n");
	}

	//

	memset(bufIoEa, 0, 2*bytes*height);
	for (int i = 0; i < 1500; ++i) {
		*((uint8_t*)bufLocalEa + i) = i;
	}
	
	cellGcmSetConvertSwizzleFormat(
		bufIoOffset, // dest
		8, // swizzled width
		8, // swizzled height
		0, // swizzled x
		0, // swizzled y
		localOffset, // source
		8, // src pitch
		2, // src x 
		2, // src y
		8, // src width
		8, // src height
		2, // bytes per pixel
		CELL_GCM_TRANSFER_LOCAL_TO_MAIN);

	cellGcmFlush();
	cellGcmFinish(900);
	
	uint8_t expected900[] = {
		0x14, 0x15, 0x16, 0x17, 0x1C, 0x1D, 0x1E, 0x1F, 
		0x18, 0x19, 0x1A, 0x1B, 0x20, 0x21, 0x22, 0x23, 
		0x24, 0x25, 0x26, 0x27, 0x2C, 0x2D, 0x2E, 0x2F, 
		0x28, 0x29, 0x2A, 0x2B, 0x30, 0x31, 0x32, 0x33,
		0x1C, 0x1D, 0x1E, 0x1F, 0x24, 0x25, 0x26, 0x27, 
		0x20, 0x21, 0x22, 0x23, 0x28, 0x29, 0x2A, 0x2B, 
		0x2C, 0x2D, 0x2E, 0x2F, 0x34, 0x35, 0x36, 0x37, 
		0x30, 0x31, 0x32, 0x33, 0x38, 0x39, 0x3A, 0x3B, 
		0x34, 0x35, 0x36, 0x37, 0x3C, 0x3D, 0x3E, 0x3F, 
		0x38, 0x39, 0x3A, 0x3B, 0x40, 0x41, 0x42, 0x43, 
		0x44, 0x45, 0x46, 0x47, 0x4C, 0x4D, 0x4E, 0x4F, 
		0x48, 0x49, 0x4A, 0x4B, 0x50, 0x51, 0x52, 0x53, 
		0x3C, 0x3D, 0x3E, 0x3F, 0x44, 0x45, 0x46, 0x47, 
		0x40, 0x41, 0x42, 0x43, 0x48, 0x49, 0x4A, 0x4B, 
		0x4C, 0x4D, 0x4E, 0x4F, 0x54, 0x55, 0x56, 0x57, 
		0x50, 0x51, 0x52, 0x53, 0x58, 0x59, 0x5A, 0x5B, 
		0x00, 0x00, 0x00, 0x00
	};
	if (memcmp(expected900, bufIoEa, sizeof(expected900))) {
		printf("cellGcmSetConvertSwizzleFormat local to main failed (900)\n");
	} else {
		printf("success 900\n");
	}

	//

	memset(bufIoEa, 0, 3000);
	for (int i = 0; i < 3000; i += 2) {
		*((uint8_t*)bufLocalEa + i) = i / 2 + 1;
		*((uint8_t*)bufLocalEa + i + 1) = i / 2 + 1;
	}
	
	cellGcmSetConvertSwizzleFormat(
		bufIoOffset, // dest
		16, // swizzled width
		16, // swizzled height
		4, // swizzled x
		4, // swizzled y
		localOffset, // source
		32, // src pitch
		0, // src x 
		0, // src y
		8, // src width
		8, // src height
		2, // bytes per pixel
		CELL_GCM_TRANSFER_LOCAL_TO_MAIN);

	cellGcmFlush();
	cellGcmFinish(1000);
	
	uint8_t expected1000[] = {
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x01, 0x01, 0x02, 0x02, 0x11, 0x11, 0x12, 0x12, 0x03, 0x03, 0x04, 0x04, 0x13, 0x13, 0x14, 0x14, 0x21, 0x21, 0x22, 0x22, 0x31, 0x31, 0x32, 0x32, 0x23, 0x23, 0x24, 0x24, 0x33, 0x33, 0x34, 0x34,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x05, 0x05, 0x06, 0x06, 0x15, 0x15, 0x16, 0x16, 0x07, 0x07, 0x08, 0x08, 0x17, 0x17, 0x18, 0x18, 0x25, 0x25, 0x26, 0x26, 0x35, 0x35, 0x36, 0x36, 0x27, 0x27, 0x28, 0x28, 0x37, 0x37, 0x38, 0x38,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x41, 0x41, 0x42, 0x42, 0x51, 0x51, 0x52, 0x52, 0x43, 0x43, 0x44, 0x44, 0x53, 0x53, 0x54, 0x54, 0x61, 0x61, 0x62, 0x62, 0x71, 0x71, 0x72, 0x72, 0x63, 0x63, 0x64, 0x64, 0x73, 0x73, 0x74, 0x74,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x45, 0x45, 0x46, 0x46, 0x55, 0x55, 0x56, 0x56, 0x47, 0x47, 0x48, 0x48, 0x57, 0x57, 0x58, 0x58, 0x65, 0x65, 0x66, 0x66, 0x75, 0x75, 0x76, 0x76, 0x67, 0x67, 0x68, 0x68, 0x77, 0x77, 0x78, 0x78,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	};
	if (memcmp(expected1000, bufIoEa, sizeof(expected1000))) {
		printf("cellGcmSetConvertSwizzleFormat local to main failed (1000)\n");
	} else {
		printf("success 1000\n");
	}

	//

	memset(bufIoEa, 0, 3000);
	for (int i = 0; i < 3000; ++i) {
		*((uint8_t*)bufLocalEa + i) = i;
	}

	CellGcmTransferScale scale;
	scale.format = CELL_GCM_TRANSFER_SCALE_FORMAT_A8R8G8B8;
	scale.clipX = 0;
	scale.clipY = 0;
	scale.clipW = 10;
	scale.clipH = 6;
	scale.outX = 0;
	scale.outY = 0;
	scale.outW = 10;
	scale.outH = 6;
	scale.inW = 10;
	scale.inH = 6;
	scale.ratioX = cellGcmGetFixedSint32(1.0f);
	scale.ratioY = cellGcmGetFixedSint32(1.0f);
	scale.pitch = 10 * 4;
	scale.origin = CELL_GCM_TRANSFER_ORIGIN_CORNER;
	scale.interp = CELL_GCM_TRANSFER_INTERPOLATOR_ZOH;
	scale.offset = localOffset;
	scale.inX = cellGcmGetFixedUint16(0.0f);
	scale.inY = cellGcmGetFixedUint16(0.0f);

	CellGcmTransferSurface surface = { 0 };
	surface.format = CELL_GCM_TRANSFER_SURFACE_FORMAT_A8R8G8B8;
	surface.pitch = 64;
	surface.offset = bufIoOffset;

	cellGcmSetTransferScaleMode(CELL_GCM_TRANSFER_LOCAL_TO_MAIN, CELL_GCM_TRANSFER_SURFACE);
	cellGcmSetTransferScaleSurface(&scale, &surface);

	cellGcmFlush();
	cellGcmFinish(1100);
	
	uint8_t expected1100[] = {
		0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09,0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x5B, 0x5C, 0x5D, 0x5E, 0x5F, 0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x79, 0x7A, 0x7B, 0x7C, 0x7D, 0x7E, 0x7F, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8A, 0x8B, 0x8C, 0x8D, 0x8E, 0x8F, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xAF, 0xB0, 0xB1, 0xB2, 0xB3, 0xB4, 0xB5, 0xB6, 0xB7, 0xB8, 0xB9, 0xBA, 0xBB, 0xBC, 0xBD, 0xBE, 0xBF, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD7, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0xDF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	};
	if (memcmp(expected1100, bufIoEa, sizeof(expected1100))) {
		printf("cellGcmSetTransferScaleSurface local to main failed (1100)\n");
	} else {
		printf("success 1100\n");
	}

	//

	memset(bufIoEa, 0, 3000);
	for (int i = 0; i < 3000; ++i) {
		*((uint8_t*)bufLocalEa + i) = i;
	}

	scale.format = CELL_GCM_TRANSFER_SCALE_FORMAT_A8R8G8B8;
	scale.clipX = 4;
	scale.clipY = 2;
	scale.clipW = 10;
	scale.clipH = 6;
	scale.outX = 2;
	scale.outY = 4;
	scale.outW = 12;
	scale.outH = 10;
	scale.inW = 10;
	scale.inH = 6;
	scale.ratioX = cellGcmGetFixedSint32(1.0f);
	scale.ratioY = cellGcmGetFixedSint32(1.0f);
	scale.pitch = 10 * 4;
	scale.origin = CELL_GCM_TRANSFER_ORIGIN_CORNER;
	scale.interp = CELL_GCM_TRANSFER_INTERPOLATOR_ZOH;
	scale.offset = localOffset;
	scale.inX = cellGcmGetFixedUint16(2.0f);
	scale.inY = cellGcmGetFixedUint16(4.0f);

	surface.format = CELL_GCM_TRANSFER_SURFACE_FORMAT_A8R8G8B8;
	surface.pitch = 64;
	surface.offset = bufIoOffset;

	cellGcmSetTransferScaleMode(CELL_GCM_TRANSFER_LOCAL_TO_MAIN, CELL_GCM_TRANSFER_SURFACE);
	cellGcmSetTransferScaleSurface(&scale, &surface);

	cellGcmFlush();
	cellGcmFinish(1200);
	
	uint8_t expected1200[] = {
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB0, 0xB1, 0xB2, 0xB3, 0xB4, 0xB5, 0xB6, 0xB7, 0xB8, 0xB9, 0xBA, 0xBB, 0xBC, 0xBD, 0xBE, 0xBF, 
		0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC4, 0xC5, 0xC6, 0xC7, 0xC4, 0xC5, 0xC6, 0xC7, 0xC4, 0xC5, 0xC6, 0xC7, 0xC4, 0xC5, 0xC6, 0xC7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0xDF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 
		0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xEC, 0xED, 0xEE, 0xEF, 0xEC, 0xED, 0xEE, 0xEF, 0xEC, 0xED, 0xEE, 0xEF, 0xEC, 0xED, 0xEE, 0xEF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0xDF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 
		0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xEC, 0xED, 0xEE, 0xEF, 0xEC, 0xED, 0xEE, 0xEF, 0xEC, 0xED, 0xEE, 0xEF, 0xEC, 0xED, 0xEE, 0xEF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0xDF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 
		0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xEC, 0xED, 0xEE, 0xEF, 0xEC, 0xED, 0xEE, 0xEF, 0xEC, 0xED, 0xEE, 0xEF, 0xEC, 0xED, 0xEE, 0xEF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	};
	if (memcmp(expected1200, bufIoEa, sizeof(expected1200))) {
		printExpected(expected1200, (uint8_t*)bufIoEa, sizeof(expected1200), 16);
		printf("cellGcmSetTransferScaleSurface local to main failed (1200)\n");
	} else {
		printf("success 1200\n");
	}

	//

	memset(bufIoEa, 0, 3000);
	for (int i = 0; i < 3000; ++i) {
		*((uint8_t*)bufLocalEa + i) = i;
	}

	scale.format = CELL_GCM_TRANSFER_SCALE_FORMAT_A8R8G8B8;
	scale.clipX = 0;
	scale.clipY = 0;
	scale.clipW = 12;
	scale.clipH = 20;
	scale.outX = 0;
	scale.outY = 0;
	scale.outW = 12;
	scale.outH = 20;
	scale.inW = 6;
	scale.inH = 10;
	scale.ratioX = cellGcmGetFixedSint32(0.5f);
	scale.ratioY = cellGcmGetFixedSint32(0.5f);
	scale.pitch = 6 * 4;
	scale.origin = CELL_GCM_TRANSFER_ORIGIN_CORNER;
	scale.interp = CELL_GCM_TRANSFER_INTERPOLATOR_ZOH;
	scale.offset = localOffset;
	scale.inX = cellGcmGetFixedUint16(0.0f);
	scale.inY = cellGcmGetFixedUint16(0.0f);

	surface.format = CELL_GCM_TRANSFER_SURFACE_FORMAT_A8R8G8B8;
	surface.pitch = 64;
	surface.offset = bufIoOffset;

	cellGcmSetTransferScaleMode(CELL_GCM_TRANSFER_LOCAL_TO_MAIN, CELL_GCM_TRANSFER_SURFACE);
	cellGcmSetTransferScaleSurface(&scale, &surface);

	cellGcmFlush();
	cellGcmFinish(1300);
	
	uint8_t expected1300[] = {
		0x00, 0x01, 0x02, 0x03, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x0C, 0x0D, 0x0E, 0x0F,
		0x10, 0x11, 0x12, 0x13, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x14, 0x15, 0x16, 0x17, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x01, 0x02, 0x03, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x0C, 0x0D, 0x0E, 0x0F, 
		0x10, 0x11, 0x12, 0x13, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x14, 0x15, 0x16, 0x17, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
		0x18, 0x19, 0x1A, 0x1B, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x1C, 0x1D, 0x1E, 0x1F, 0x20, 0x21, 0x22, 0x23, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x24, 0x25, 0x26, 0x27, 
		0x28, 0x29, 0x2A, 0x2B, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F, 0x2C, 0x2D, 0x2E, 0x2F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
		0x18, 0x19, 0x1A, 0x1B, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x1C, 0x1D, 0x1E, 0x1F, 0x20, 0x21, 0x22, 0x23, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x24, 0x25, 0x26, 0x27, 
		0x28, 0x29, 0x2A, 0x2B, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F, 0x2C, 0x2D, 0x2E, 0x2F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x30, 0x31, 0x32, 0x33, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A, 0x3B, 0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F, 0x3C, 0x3D, 0x3E, 0x3F,
		0x40, 0x41, 0x42, 0x43, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x44, 0x45, 0x46, 0x47, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x30, 0x31, 0x32, 0x33, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A, 0x3B, 0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F, 0x3C, 0x3D, 0x3E, 0x3F,
		0x40, 0x41, 0x42, 0x43, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x44, 0x45, 0x46, 0x47, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
		0x48, 0x49, 0x4A, 0x4B, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x54, 0x55, 0x56, 0x57, 
		0x58, 0x59, 0x5A, 0x5B, 0x58, 0x59, 0x5A, 0x5B, 0x5C, 0x5D, 0x5E, 0x5F, 0x5C, 0x5D, 0x5E, 0x5F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
		0x48, 0x49, 0x4A, 0x4B, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x54, 0x55, 0x56, 0x57, 
		0x58, 0x59, 0x5A, 0x5B, 0x58, 0x59, 0x5A, 0x5B, 0x5C, 0x5D, 0x5E, 0x5F, 0x5C, 0x5D, 0x5E, 0x5F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
		0x60, 0x61, 0x62, 0x63, 0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x6C, 0x6D, 0x6E, 0x6F, 
		0x70, 0x71, 0x72, 0x73, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x74, 0x75, 0x76, 0x77, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
		0x60, 0x61, 0x62, 0x63, 0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x6C, 0x6D, 0x6E, 0x6F, 
		0x70, 0x71, 0x72, 0x73, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x74, 0x75, 0x76, 0x77, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
		0x78, 0x79, 0x7A, 0x7B, 0x78, 0x79, 0x7A, 0x7B, 0x7C, 0x7D, 0x7E, 0x7F, 0x7C, 0x7D, 0x7E, 0x7F, 0x80, 0x81, 0x82, 0x83, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x84, 0x85, 0x86, 0x87, 
		0x88, 0x89, 0x8A, 0x8B, 0x88, 0x89, 0x8A, 0x8B, 0x8C, 0x8D, 0x8E, 0x8F, 0x8C, 0x8D, 0x8E, 0x8F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
		0x78, 0x79, 0x7A, 0x7B, 0x78, 0x79, 0x7A, 0x7B, 0x7C, 0x7D, 0x7E, 0x7F, 0x7C, 0x7D, 0x7E, 0x7F, 0x80, 0x81, 0x82, 0x83, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x84, 0x85, 0x86, 0x87,
		0x88, 0x89, 0x8A, 0x8B, 0x88, 0x89, 0x8A, 0x8B, 0x8C, 0x8D, 0x8E, 0x8F, 0x8C, 0x8D, 0x8E, 0x8F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
		0x90, 0x91, 0x92, 0x93, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F, 0x9C, 0x9D, 0x9E, 0x9F, 
		0xA0, 0xA1, 0xA2, 0xA3, 0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA4, 0xA5, 0xA6, 0xA7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
		0x90, 0x91, 0x92, 0x93, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F, 0x9C, 0x9D, 0x9E, 0x9F, 
		0xA0, 0xA1, 0xA2, 0xA3, 0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA4, 0xA5, 0xA6, 0xA7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
		0xA8, 0xA9, 0xAA, 0xAB, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xAF, 0xAC, 0xAD, 0xAE, 0xAF, 0xB0, 0xB1, 0xB2, 0xB3, 0xB0, 0xB1, 0xB2, 0xB3, 0xB4, 0xB5, 0xB6, 0xB7, 0xB4, 0xB5, 0xB6, 0xB7, 
		0xB8, 0xB9, 0xBA, 0xBB, 0xB8, 0xB9, 0xBA, 0xBB, 0xBC, 0xBD, 0xBE, 0xBF, 0xBC, 0xBD, 0xBE, 0xBF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
		0xA8, 0xA9, 0xAA, 0xAB, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xAF, 0xAC, 0xAD, 0xAE, 0xAF, 0xB0, 0xB1, 0xB2, 0xB3, 0xB0, 0xB1, 0xB2, 0xB3, 0xB4, 0xB5, 0xB6, 0xB7, 0xB4, 0xB5, 0xB6, 0xB7, 
		0xB8, 0xB9, 0xBA, 0xBB, 0xB8, 0xB9, 0xBA, 0xBB, 0xBC, 0xBD, 0xBE, 0xBF, 0xBC, 0xBD, 0xBE, 0xBF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
		0xC0, 0xC1, 0xC2, 0xC3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xCC, 0xCD, 0xCE, 0xCF, 
		0xD0, 0xD1, 0xD2, 0xD3, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD7, 0xD4, 0xD5, 0xD6, 0xD7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
		0xC0, 0xC1, 0xC2, 0xC3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xCC, 0xCD, 0xCE, 0xCF, 
		0xD0, 0xD1, 0xD2, 0xD3, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD7, 0xD4, 0xD5, 0xD6, 0xD7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
		0xD8, 0xD9, 0xDA, 0xDB, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0xDF, 0xDC, 0xDD, 0xDE, 0xDF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE4, 0xE5, 0xE6, 0xE7, 
		0xE8, 0xE9, 0xEA, 0xEB, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xEC, 0xED, 0xEE, 0xEF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
		0xD8, 0xD9, 0xDA, 0xDB, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0xDF, 0xDC, 0xDD, 0xDE, 0xDF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE4, 0xE5, 0xE6, 0xE7,
		0xE8, 0xE9, 0xEA, 0xEB, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xEC, 0xED, 0xEE, 0xEF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	};
	if (memcmp(expected1300, bufIoEa, sizeof(expected1300))) {
		printf("cellGcmSetTransferScaleSurface local to main failed (1300)\n");
	} else {
		printf("success 1300\n");
	}

	//

	memset(bufIoEa, 0, 3000);
	for (int i = 0; i < 3000; ++i) {
		*((uint8_t*)bufLocalEa + i) = i;
	}

	scale.format = CELL_GCM_TRANSFER_SCALE_FORMAT_A8R8G8B8;
	scale.clipX = 0;
	scale.clipY = 0;
	scale.clipW = 10;
	scale.clipH = 6;
	scale.outX = 0;
	scale.outY = 0;
	scale.outW = 10;
	scale.outH = 6;
	scale.inW = 10;
	scale.inH = 6;
	scale.ratioX = cellGcmGetFixedSint32(1.0f);
	scale.ratioY = cellGcmGetFixedSint32(1.0f);
	scale.pitch = 10 * 4;
	scale.origin = CELL_GCM_TRANSFER_ORIGIN_CORNER;
	scale.interp = CELL_GCM_TRANSFER_INTERPOLATOR_ZOH;
	scale.offset = localOffset;
	scale.inX = cellGcmGetFixedUint16(0.0f);
	scale.inY = cellGcmGetFixedUint16(0.0f);

	surface.format = CELL_GCM_TRANSFER_SURFACE_FORMAT_R5G6B5;
	surface.pitch = 64;
	surface.offset = bufIoOffset;

	cellGcmSetTransferScaleMode(CELL_GCM_TRANSFER_LOCAL_TO_MAIN, CELL_GCM_TRANSFER_SURFACE);
	cellGcmSetTransferScaleSurface(&scale, &surface);

	cellGcmFlush();
	cellGcmFinish(1400);
	
	uint8_t expected1400[] = {
		0x00, 0x00, 0x00, 0x20, 0x08, 0x41, 0x08, 0x61, 0x10, 0x82, 0x10, 0xA2, 0x18, 0xC3, 0x18, 0xE3, 0x21, 0x04, 0x21, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x29, 0x45, 0x29, 0x65, 0x31, 0x86, 0x31, 0xA6, 0x39, 0xC7, 0x39, 0xE7, 0x42, 0x08, 0x42, 0x28, 0x4A, 0x49, 0x4A, 0x69, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x52, 0x8A, 0x52, 0xAA, 0x5A, 0xCB, 0x5A, 0xEB, 0x63, 0x0C, 0x63, 0x2C, 0x6B, 0x4D, 0x6B, 0x6D, 0x73, 0x8E, 0x73, 0xAE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x7B, 0xCF, 0x7B, 0xEF, 0x84, 0x10, 0x84, 0x30, 0x8C, 0x51, 0x8C, 0x71, 0x94, 0x92, 0x94, 0xB2, 0x9C, 0xD3, 0x9C, 0xF3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0xA5, 0x14, 0xA5, 0x34, 0xAD, 0x55, 0xAD, 0x75, 0xB5, 0x96, 0xB5, 0xB6, 0xBD, 0xD7, 0xBD, 0xF7, 0xC6, 0x18, 0xC6, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0xCE, 0x59, 0xCE, 0x79, 0xD6, 0x9A, 0xD6, 0xBA, 0xDE, 0xDB, 0xDE, 0xFB, 0xE7, 0x1C, 0xE7, 0x3C, 0xEF, 0x5D, 0xEF, 0x7D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	};
	if (memcmp(expected1400, bufIoEa, sizeof(expected1400))) {
		printExpected(expected1400, (uint8_t*)bufIoEa, sizeof(expected1400), 32);
		printf("cellGcmSetTransferScaleSurface local to main failed (1400)\n");
	} else {
		printf("success 1400\n");
	}

	//

	memset(bufIoEa, 0, 3000);
	for (int i = 0; i < 3000; ++i) {
		*((uint8_t*)bufLocalEa + i) = i;
	}

	scale.format = CELL_GCM_TRANSFER_SCALE_FORMAT_R5G6B5;
	scale.clipX = 1;
	scale.clipY = 1;
	scale.clipW = 5;
	scale.clipH = 6;
	scale.outX = 0;
	scale.outY = 0;
	scale.outW = 10;
	scale.outH = 6;
	scale.inW = 10;
	scale.inH = 6;
	scale.ratioX = cellGcmGetFixedSint32(1.0f);
	scale.ratioY = cellGcmGetFixedSint32(1.0f);
	scale.pitch = 10 * 4;
	scale.origin = CELL_GCM_TRANSFER_ORIGIN_CORNER;
	scale.interp = CELL_GCM_TRANSFER_INTERPOLATOR_ZOH;
	scale.offset = localOffset;
	scale.inX = cellGcmGetFixedUint16(0.0f);
	scale.inY = cellGcmGetFixedUint16(0.0f);

	surface.format = CELL_GCM_TRANSFER_SURFACE_FORMAT_R5G6B5;
	surface.pitch = 64;
	surface.offset = bufIoOffset;

	cellGcmSetTransferScaleMode(CELL_GCM_TRANSFER_LOCAL_TO_MAIN, CELL_GCM_TRANSFER_SURFACE);
	cellGcmSetTransferScaleSurface(&scale, &surface);

	cellGcmFlush();
	cellGcmFinish(1500);
	
	uint8_t expected1500[] = {
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F, 0x30, 0x31, 0x32, 0x33, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x5B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x7A, 0x7B, 0x7C, 0x7D, 0x7E, 0x7F, 0x80, 0x81, 0x82, 0x83, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	};
	if (memcmp(expected1500, bufIoEa, sizeof(expected1500))) {
		printf("cellGcmSetTransferScaleSurface local to main failed (1500)\n");
	} else {
		printf("success 1500\n");
	}

	//

	memset(bufIoEa, 0, 3000);
	for (int i = 0; i < 3000; ++i) {
		*((uint8_t*)bufLocalEa + i) = i;
	}

	scale.format = CELL_GCM_TRANSFER_SCALE_FORMAT_R5G6B5;
	scale.clipX = 0;
	scale.clipY = 0;
	scale.clipW = 12;
	scale.clipH = 8;
	scale.outX = 0;
	scale.outY = 0;
	scale.outW = 12;
	scale.outH = 8;
	scale.inW = 6;
	scale.inH = 4;
	scale.ratioX = cellGcmGetFixedSint32(0.5f);
	scale.ratioY = cellGcmGetFixedSint32(0.5f);
	scale.pitch = 12 * 2;
	scale.origin = CELL_GCM_TRANSFER_ORIGIN_CORNER;
	scale.interp = CELL_GCM_TRANSFER_INTERPOLATOR_ZOH;
	scale.offset = localOffset;
	scale.inX = cellGcmGetFixedUint16(0.0f);
	scale.inY = cellGcmGetFixedUint16(0.0f);

	surface.format = CELL_GCM_TRANSFER_SURFACE_FORMAT_R5G6B5;
	surface.pitch = 64;
	surface.offset = bufIoOffset;

	cellGcmSetTransferScaleMode(CELL_GCM_TRANSFER_LOCAL_TO_MAIN, CELL_GCM_TRANSFER_SURFACE);
	cellGcmSetTransferScaleSurface(&scale, &surface);

	cellGcmFlush();
	cellGcmFinish(1600);
	
	uint8_t expected1600[] = {
		0x00, 0x01, 0x00, 0x01, 0x02, 0x03, 0x02, 0x03, 0x04, 0x05, 0x04, 0x05, 0x06, 0x07, 0x06, 0x07, 0x08, 0x09, 0x08, 0x09, 0x0A, 0x0B, 0x0A, 0x0B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x01, 0x00, 0x01, 0x02, 0x03, 0x02, 0x03, 0x04, 0x05, 0x04, 0x05, 0x06, 0x07, 0x06, 0x07, 0x08, 0x09, 0x08, 0x09, 0x0A, 0x0B, 0x0A, 0x0B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x18, 0x19, 0x18, 0x19, 0x1A, 0x1B, 0x1A, 0x1B, 0x1C, 0x1D, 0x1C, 0x1D, 0x1E, 0x1F, 0x1E, 0x1F, 0x20, 0x21, 0x20, 0x21, 0x22, 0x23, 0x22, 0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
		0x18, 0x19, 0x18, 0x19, 0x1A, 0x1B, 0x1A, 0x1B, 0x1C, 0x1D, 0x1C, 0x1D, 0x1E, 0x1F, 0x1E, 0x1F, 0x20, 0x21, 0x20, 0x21, 0x22, 0x23, 0x22, 0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
		0x30, 0x31, 0x30, 0x31, 0x32, 0x33, 0x32, 0x33, 0x34, 0x35, 0x34, 0x35, 0x36, 0x37, 0x36, 0x37, 0x38, 0x39, 0x38, 0x39, 0x3A, 0x3B, 0x3A, 0x3B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x30, 0x31, 0x30, 0x31, 0x32, 0x33, 0x32, 0x33, 0x34, 0x35, 0x34, 0x35, 0x36, 0x37, 0x36, 0x37, 0x38, 0x39, 0x38, 0x39, 0x3A, 0x3B, 0x3A, 0x3B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x48, 0x49, 0x48, 0x49, 0x4A, 0x4B, 0x4A, 0x4B, 0x4C, 0x4D, 0x4C, 0x4D, 0x4E, 0x4F, 0x4E, 0x4F, 0x50, 0x51, 0x50, 0x51, 0x52, 0x53, 0x52, 0x53, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
		0x48, 0x49, 0x48, 0x49, 0x4A, 0x4B, 0x4A, 0x4B, 0x4C, 0x4D, 0x4C, 0x4D, 0x4E, 0x4F, 0x4E, 0x4F, 0x50, 0x51, 0x50, 0x51, 0x52, 0x53, 0x52, 0x53, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	};
	if (memcmp(expected1600, bufIoEa, sizeof(expected1600))) {
		printf("cellGcmSetTransferScaleSurface local to main failed (1600)\n");
	} else {
		printf("success 1600\n");
	}

	//

	memset(bufIoEa, 0, 3000);
	for (int i = 0; i < 3000; ++i) {
		*((uint8_t*)bufLocalEa + i) = i;
	}

	scale.format = CELL_GCM_TRANSFER_SCALE_FORMAT_R5G6B5;
	scale.clipX = 0;
	scale.clipY = 0;
	scale.clipW = 12;
	scale.clipH = 8;
	scale.outX = 2;
	scale.outY = 0;
	scale.outW = 12;
	scale.outH = 8;
	scale.inW = 12;
	scale.inH = 8;
	scale.ratioX = cellGcmGetFixedSint32(1.0f);
	scale.ratioY = cellGcmGetFixedSint32(1.0f);
	scale.pitch = 12 * 2;
	scale.origin = CELL_GCM_TRANSFER_ORIGIN_CORNER;
	scale.interp = CELL_GCM_TRANSFER_INTERPOLATOR_ZOH;
	scale.offset = localOffset;
	scale.inX = cellGcmGetFixedUint16(0.0f);
	scale.inY = cellGcmGetFixedUint16(0.0f);

	surface.format = CELL_GCM_TRANSFER_SURFACE_FORMAT_R5G6B5;
	surface.pitch = 64;
	surface.offset = bufIoOffset;

	cellGcmSetTransferScaleMode(CELL_GCM_TRANSFER_LOCAL_TO_MAIN, CELL_GCM_TRANSFER_SURFACE);
	cellGcmSetTransferScaleSurface(&scale, &surface);

	cellGcmFlush();
	cellGcmFinish(1700);
	
	uint8_t expected1700[] = {
		0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10, 0x11, 0x12, 0x13, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F, 0x40, 0x41, 0x42, 0x43, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x5B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x78, 0x79, 0x7A, 0x7B, 0x7C, 0x7D, 0x7E, 0x7F, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8A, 0x8B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F, 0xA0, 0xA1, 0xA2, 0xA3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xAF, 0xB0, 0xB1, 0xB2, 0xB3, 0xB4, 0xB5, 0xB6, 0xB7, 0xB8, 0xB9, 0xBA, 0xBB, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	};
	if (memcmp(expected1700, bufIoEa, sizeof(expected1700))) {
		printf("cellGcmSetTransferScaleSurface local to main failed (1700)\n");
	} else {
		printf("success 1700\n");
	}

	//

	memset(bufIoEa, 0, 3000);
	for (int i = 0; i < 3000; ++i) {
		*((uint8_t*)bufLocalEa + i) = i;
	}

	scale.format = CELL_GCM_TRANSFER_SCALE_FORMAT_R5G6B5;
	scale.clipX = 0;
	scale.clipY = 0;
	scale.clipW = 12;
	scale.clipH = 8;
	scale.outX = 2;
	scale.outY = 0;
	scale.outW = 12;
	scale.outH = 8;
	scale.inW = 12;
	scale.inH = 8;
	scale.ratioX = cellGcmGetFixedSint32(1.0f);
	scale.ratioY = cellGcmGetFixedSint32(1.0f);
	scale.pitch = 12 * 2;
	scale.origin = CELL_GCM_TRANSFER_ORIGIN_CORNER;
	scale.interp = CELL_GCM_TRANSFER_INTERPOLATOR_ZOH;
	scale.offset = localOffset;
	scale.inX = cellGcmGetFixedUint16(2.0f);
	scale.inY = cellGcmGetFixedUint16(2.0f);

	surface.format = CELL_GCM_TRANSFER_SURFACE_FORMAT_R5G6B5;
	surface.pitch = 64;
	surface.offset = bufIoOffset;

	cellGcmSetTransferScaleMode(CELL_GCM_TRANSFER_LOCAL_TO_MAIN, CELL_GCM_TRANSFER_SURFACE);
	cellGcmSetTransferScaleSurface(&scale, &surface);

	cellGcmFlush();
	cellGcmFinish(1800);
	
	uint8_t expected1800[] = {
		0x00, 0x00, 0x00, 0x00, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x00, 0x00, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x5B, 0x5C, 0x5D, 0x5E, 0x5F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x00, 0x00, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x00, 0x00, 0x7C, 0x7D, 0x7E, 0x7F, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8A, 0x8B, 0x8C, 0x8D, 0x8E, 0x8F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x00, 0x00, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F, 0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x00, 0x00, 0xAC, 0xAD, 0xAE, 0xAF, 0xB0, 0xB1, 0xB2, 0xB3, 0xB4, 0xB5, 0xB6, 0xB7, 0xB8, 0xB9, 0xBA, 0xBB, 0xBC, 0xBD, 0xBE, 0xBF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x00, 0x00, 0xAC, 0xAD, 0xAE, 0xAF, 0xB0, 0xB1, 0xB2, 0xB3, 0xB4, 0xB5, 0xB6, 0xB7, 0xB8, 0xB9, 0xBA, 0xBB, 0xBC, 0xBD, 0xBE, 0xBF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x00, 0x00, 0xAC, 0xAD, 0xAE, 0xAF, 0xB0, 0xB1, 0xB2, 0xB3, 0xB4, 0xB5, 0xB6, 0xB7, 0xB8, 0xB9, 0xBA, 0xBB, 0xBC, 0xBD, 0xBE, 0xBF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	};
	if (memcmp(expected1800, bufIoEa, sizeof(expected1800))) {
		printf("cellGcmSetTransferScaleSurface local to main failed (1800)\n");
	} else {
		printf("success 1800\n");
	}

	//

	memset(bufIoEa, 0, 3000);
	for (int i = 0; i < 3000; i += 2) {
		*((uint8_t*)bufLocalEa + i) = i / 2 + 1;
		*((uint8_t*)bufLocalEa + i + 1) = i / 2 + 1;
	}

	scale.format = CELL_GCM_TRANSFER_SCALE_FORMAT_R5G6B5;
	scale.clipX = 0;
	scale.clipY = 0;
	scale.clipW = 8;
	scale.clipH = 8;
	scale.outX = 0;
	scale.outY = 0;
	scale.outW = 8;
	scale.outH = 8;
	scale.inW = 8;
	scale.inH = 8;
	scale.ratioX = cellGcmGetFixedSint32(1.0f);
	scale.ratioY = cellGcmGetFixedSint32(1.0f);
	scale.pitch = 8 * 2;
	scale.origin = CELL_GCM_TRANSFER_ORIGIN_CORNER;
	scale.interp = CELL_GCM_TRANSFER_INTERPOLATOR_ZOH;
	scale.offset = localOffset;
	scale.inX = cellGcmGetFixedUint16(0.0f);
	scale.inY = cellGcmGetFixedUint16(0.0f);

	CellGcmTransferSwizzle swizzle;
	swizzle.format = CELL_GCM_TRANSFER_SURFACE_FORMAT_R5G6B5;
	swizzle.width = 3;
	swizzle.height = 3;
	swizzle.offset = bufIoOffset;

	cellGcmSetTransferScaleMode(CELL_GCM_TRANSFER_LOCAL_TO_MAIN, CELL_GCM_TRANSFER_SWIZZLE);
	cellGcmSetTransferScaleSwizzle(&scale, &swizzle);

	cellGcmFlush();
	cellGcmFinish(1900);
	
	uint8_t expected1900[] = {
		0x01, 0x01, 0x02, 0x02, 0x09, 0x09, 0x0A, 0x0A, 0x03, 0x03, 0x04, 0x04, 0x0B, 0x0B, 0x0C, 0x0C,
		0x11, 0x11, 0x12, 0x12, 0x19, 0x19, 0x1A, 0x1A, 0x13, 0x13, 0x14, 0x14, 0x1B, 0x1B, 0x1C, 0x1C,
		0x05, 0x05, 0x06, 0x06, 0x0D, 0x0D, 0x0E, 0x0E, 0x07, 0x07, 0x08, 0x08, 0x0F, 0x0F, 0x10, 0x10,
		0x15, 0x15, 0x16, 0x16, 0x1D, 0x1D, 0x1E, 0x1E, 0x17, 0x17, 0x18, 0x18, 0x1F, 0x1F, 0x20, 0x20,
		0x21, 0x21, 0x22, 0x22, 0x29, 0x29, 0x2A, 0x2A, 0x23, 0x23, 0x24, 0x24, 0x2B, 0x2B, 0x2C, 0x2C,
		0x31, 0x31, 0x32, 0x32, 0x39, 0x39, 0x3A, 0x3A, 0x33, 0x33, 0x34, 0x34, 0x3B, 0x3B, 0x3C, 0x3C,
		0x25, 0x25, 0x26, 0x26, 0x2D, 0x2D, 0x2E, 0x2E, 0x27, 0x27, 0x28, 0x28, 0x2F, 0x2F, 0x30, 0x30,
		0x35, 0x35, 0x36, 0x36, 0x3D, 0x3D, 0x3E, 0x3E, 0x37, 0x37, 0x38, 0x38, 0x3F, 0x3F, 0x40, 0x40
	};
	if (memcmp(expected1900, bufIoEa, sizeof(expected1900))) {
		printf("cellGcmSetTransferScaleSwizzle local to main failed (1900)\n");
	} else {
		printf("success 1900\n");
	}

	//

	memset(bufIoEa, 0, 3000);
	for (int i = 0; i < 3000; i += 2) {
		*((uint8_t*)bufLocalEa + i) = i / 2 + 1;
		*((uint8_t*)bufLocalEa + i + 1) = i / 2 + 1;
	}

	scale.format = CELL_GCM_TRANSFER_SCALE_FORMAT_R5G6B5;
	scale.clipX = 0;
	scale.clipY = 0;
	scale.clipW = 8;
	scale.clipH = 8;
	scale.outX = 0;
	scale.outY = 0;
	scale.outW = 8;
	scale.outH = 8;
	scale.inW = 4;
	scale.inH = 4;
	scale.ratioX = cellGcmGetFixedSint32(0.5f);
	scale.ratioY = cellGcmGetFixedSint32(0.5f);
	scale.pitch = 4 * 2;
	scale.origin = CELL_GCM_TRANSFER_ORIGIN_CORNER;
	scale.interp = CELL_GCM_TRANSFER_INTERPOLATOR_ZOH;
	scale.offset = localOffset;
	scale.inX = cellGcmGetFixedUint16(0.0f);
	scale.inY = cellGcmGetFixedUint16(0.0f);

	swizzle.format = CELL_GCM_TRANSFER_SURFACE_FORMAT_R5G6B5;
	swizzle.width = 3;
	swizzle.height = 3;
	swizzle.offset = bufIoOffset;

	cellGcmSetTransferScaleMode(CELL_GCM_TRANSFER_LOCAL_TO_MAIN, CELL_GCM_TRANSFER_SWIZZLE);
	cellGcmSetTransferScaleSwizzle(&scale, &swizzle);

	cellGcmFlush();
	cellGcmFinish(2000);
	
	uint8_t expected2000[] = {
		0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
		0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06,
		0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04,
		0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,
		0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A,
		0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E,
		0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C,
		0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	};
	if (memcmp(expected2000, bufIoEa, sizeof(expected2000))) {
		printf("cellGcmSetTransferScaleSwizzle local to main failed (2000)\n");
	} else {
		printf("success 2000\n");
	}

	printf("completed\n");

	return 0;
}
