/*   SCE CONFIDENTIAL                                       */
/*   PlayStation(R)3 Programmer Tool Runtime Library 400.001 */
/*   Copyright (C) 2006 Sony Computer Entertainment Inc.    */
/*   All Rights Reserved.                                   */

void main
(
	float4 position	: POSITION,
	float3 normal   : NORMAL,

    uniform float4x4 ModelMatrix,
    uniform float4x4 ViewProjMatrix,

	uniform float3   lightPos,
	uniform float3   lightCol,
	uniform float3   ambient,
	uniform float3   eyePosLocal,

	out float4 oPosition : POSITION,
	out float4 oColor    : COLOR,
	out float4 oSpecular : TEXCOORD0
)
{
	float shininess = 17.8954f;

	// normalize the normal 
	normal = normalize (normal);

	// basic diffuse lighting calcution
	//
	// - This sample calculate lightings in local space
	//
	float3 lightDirection = normalize (lightPos - position.xyz);
    float  diffuseLight = max (dot (normal, lightDirection), 0.f);

	// Compute the specular lighting term
	float3 eyeDirection = normalize (eyePosLocal - position.xyz);
    float3 halfAngle = normalize (lightDirection + eyeDirection);
    float  specularLight = pow (max (dot (halfAngle, normal), 0.f), shininess);
    if (diffuseLight <= 0.f)
        specularLight = 0.f;

	// compute the final vertex color
	float3 color = (lightCol * diffuseLight) + ambient ;

	// transpose
	ViewProjMatrix = transpose(ViewProjMatrix);
	ModelMatrix = transpose(ModelMatrix);

	oPosition = mul(mul(ViewProjMatrix, ModelMatrix), position);
	oColor = float4( color, 1.f);
	oSpecular = specularLight;
}
