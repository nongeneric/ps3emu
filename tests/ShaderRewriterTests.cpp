#include "../ps3emu/shader_dasm.h"
#include "../ps3emu/ShaderRewriter.h"
#include <catch.hpp>

using namespace ShaderRewriter;

std::string printStatements(std::vector<std::unique_ptr<Statement>>& stms) {
    std::string res;
    for (auto i = 0u; i < stms.size(); i++) {
        if (i > 0)
            res += ", ";
        res += PrintStatement(stms[i].get());
    }
    return res;
}

TEST_CASE() {
    unsigned char instr[] = {
        0x06, 0x00, 0x02, 0x00, 0xc8, 0x01, 0x1c, 0x9d, 0x00, 0x02, 0x00, 0x00,
        0xc8, 0x00, 0x3f, 0xe1, 0xd7, 0x0a, 0x3c, 0xa3, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x10, 0x00,
        0xc8, 0x00, 0x1c, 0x9d, 0xc8, 0x00, 0x00, 0x01, 0xc8, 0x00, 0x00, 0x01,
        0x06, 0x00, 0x02, 0x00, 0xc8, 0x00, 0x1c, 0x9d, 0x00, 0x02, 0x00, 0x00,
        0xc8, 0x00, 0x00, 0x01, 0x00, 0x00, 0x42, 0x48, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x7e, 0x41, 0x00,
        0xc8, 0x00, 0x1c, 0x9d, 0xc8, 0x00, 0x00, 0x01, 0xc8, 0x00, 0x00, 0x01,
        0x18, 0x00, 0x11, 0x00, 0x80, 0x00, 0x3c, 0x9c, 0xc8, 0x00, 0x00, 0x01,
        0xc8, 0x00, 0x00, 0x01, 0x10, 0x02, 0x01, 0x00, 0xc8, 0x00, 0x1c, 0x9d,
        0xc8, 0x00, 0x00, 0x01, 0xc8, 0x00, 0x00, 0x01, 0x02, 0x00, 0x01, 0x00,
        0x54, 0x00, 0x1c, 0x9d, 0xc8, 0x00, 0x00, 0x01, 0xc8, 0x00, 0x00, 0x01,
        0x10, 0x02, 0x01, 0x00, 0xc8, 0x00, 0x0a, 0xa7, 0xc8, 0x00, 0x00, 0x01,
        0xc8, 0x00, 0x00, 0x01, 0x02, 0x00, 0x01, 0x00, 0x54, 0x00, 0x00, 0x07,
        0xc8, 0x00, 0x00, 0x01, 0xc8, 0x00, 0x00, 0x01, 0x04, 0x00, 0x01, 0x00,
        0xfe, 0x04, 0x1c, 0x9d, 0xc8, 0x00, 0x00, 0x01, 0xc8, 0x00, 0x00, 0x01,
        0x18, 0x00, 0x03, 0x00, 0x80, 0x00, 0x1c, 0x9c, 0x00, 0x02, 0x00, 0x00,
        0xc8, 0x00, 0x00, 0x01, 0x00, 0x00, 0xc1, 0xc8, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x86, 0x00, 0x01, 0x00,
        0xc8, 0x01, 0x1c, 0x9d, 0xc8, 0x00, 0x00, 0x01, 0xc8, 0x00, 0x3f, 0xe1,
        0x02, 0x02, 0x38, 0x00, 0x5c, 0x00, 0x1c, 0x9d, 0x5c, 0x00, 0x00, 0x01,
        0xc8, 0x00, 0x00, 0x01, 0x03, 0x7e, 0x4a, 0x00, 0xc8, 0x04, 0x1c, 0x9d,
        0x00, 0x02, 0x00, 0x00, 0xc8, 0x00, 0x00, 0x01, 0x00, 0x00, 0x43, 0xc8,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x18, 0x00, 0x01, 0x00, 0x32, 0x02, 0x1c, 0x9d, 0xc8, 0x00, 0x00, 0x01,
        0xc8, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x3f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x7e, 0x7e, 0x00,
        0xc8, 0x00, 0x1c, 0x9d, 0xc8, 0x00, 0x00, 0x01, 0xc8, 0x00, 0x00, 0x01,
        0x1e, 0x01, 0x01, 0x00, 0x80, 0x02, 0x00, 0x14, 0xc8, 0x00, 0x00, 0x01,
        0xc8, 0x00, 0x00, 0x01, 0x66, 0x66, 0x3f, 0x66, 0x00, 0x00, 0x3f, 0x80,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    };
    
    FragmentInstr fi;
    auto pos = 0;
    
//     bool last = false;
//     std::string allstr;
//     while (!last) {
//         pos += fragment_dasm_instr(instr + pos, fi);
//         auto st = MakeStatement(fi);
//         auto str = printStatements(st);
//         allstr += str + "\n";
//         last = fi.is_last;
//     }
//     
//     REQUIRE( allstr == "" );
    
    pos += fragment_dasm_instr(instr + pos, fi);
    auto st = MakeStatement(fi);
    auto str = printStatements(st);
    REQUIRE( str == "r0.xy = (attr_WPOS * (vec4(0.02, 0, 0, 0).xxxx)).xy;" );
    
    pos += fragment_dasm_instr(instr + pos, fi);
    st = MakeStatement(fi);
    str = printStatements(st);
    REQUIRE( str == "r0.xy = fract(r0).xy;" );
    
    pos += fragment_dasm_instr(instr + pos, fi);
    st = MakeStatement(fi);
    str = printStatements(st);
    REQUIRE( str == "r0.xy = (r0 * (vec4(50, 0, 0, 0).xxxx)).xy;" );
    
    pos += fragment_dasm_instr(instr + pos, fi);
    st = MakeStatement(fi);
    str = printStatements(st);
    REQUIRE( str == "c0.xy = r0.xy;" );
    
    pos += fragment_dasm_instr(instr + pos, fi);
    st = MakeStatement(fi);
    str = printStatements(st);
    REQUIRE( str == "r0.zw = floor((abs(r0).xxxy)).zw;" );
    
    pos += fragment_dasm_instr(instr + pos, fi);
    st = MakeStatement(fi);
    str = printStatements(st);
    REQUIRE( str == "r1.w = r0.w;" );
    
    pos += fragment_dasm_instr(instr + pos, fi);
    st = MakeStatement(fi);
    str = printStatements(st);
    REQUIRE( str == "r0.x = (r0.zzzz).x;" );
    
    pos += fragment_dasm_instr(instr + pos, fi);
    st = MakeStatement(fi);
    str = printStatements(st);
    REQUIRE( str == 
        "if (((c0.yyyy).x < 0)) {\n"
        "    r1.w = (-r0).w;\n"
        "}"
    );
    
    pos += fragment_dasm_instr(instr + pos, fi);
    st = MakeStatement(fi);
    str = printStatements(st);
    REQUIRE( str == 
        "if (((c0.xxxx).x < 0)) {\n"
        "    r0.x = ((-r0).zzzz).x;\n"
        "}"
    );
    
    pos += fragment_dasm_instr(instr + pos, fi);
    st = MakeStatement(fi);
    str = printStatements(st);
    REQUIRE( str == "r0.y = (r1.wwww).y;" );
    
    pos += fragment_dasm_instr(instr + pos, fi);
    st = MakeStatement(fi);
    str = printStatements(st);
    REQUIRE( str == "r0.zw = ((r0.xxxy) + (vec4(-25, 0, 0, 0).xxxx)).zw;" );
    
    pos += fragment_dasm_instr(instr + pos, fi);
    st = MakeStatement(fi);
    str = printStatements(st);
    REQUIRE( str == "r0.xy = attr_TEX0.xy;" );
    
    pos += fragment_dasm_instr(instr + pos, fi);
    st = MakeStatement(fi);
    str = printStatements(st);
    REQUIRE( str == "r1.x = dot((r0.zwzz).xy, (r0.zwzz).xy).x;" );
    
    pos += fragment_dasm_instr(instr + pos, fi);
    st = MakeStatement(fi);
    str = printStatements(st);
    REQUIRE( str == "c0.x = float(lessThan(r1, (vec4(400, 0, 0, 0).xxxx)).x);" );
    
    pos += fragment_dasm_instr(instr + pos, fi);
    st = MakeStatement(fi);
    str = printStatements(st);
    REQUIRE( str == "r0.zw = (vec4(0, 0, 1, 0).yzyz).zw;" );
    
    pos += fragment_dasm_instr(instr + pos, fi);
    st = MakeStatement(fi);
    str = printStatements(st);
    REQUIRE( str == "" );
    
    pos += fragment_dasm_instr(instr + pos, fi);
    st = MakeStatement(fi);
    str = printStatements(st);
    REQUIRE( str == 
        "if (((c0.xxxx).x != 0)) {\n"
        "    r0 = (vec4(0.9, 1, 0, 0).xxxy);\n"
        "}"
    );
}