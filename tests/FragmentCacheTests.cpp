#include "ps3emu/rsx/FragmentShaderCache.h"
#include "xxhash.h"

#include <catch2/catch.hpp>

TEST_CASE("fragment_cache_basic") {
    uint8_t raw[] {
        0xae, 0x02, 0x03, 0x00, 0xc8, 0x01, 0x1c, 0x9f, 0xc8, 0x02, 0x00, 0x01, 0xc8, 0x00, 0x3f, 0xe1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x10, 0x02, 0x05, 0x00, 0xc8, 0x04, 0x1c, 0x9d, 0xc8, 0x04, 0x00, 0x01, 0xc8, 0x00, 0x00, 0x01,
        0x10, 0x82, 0x01, 0x40, 0x00, 0x02, 0x1c, 0x9c, 0xc8, 0x00, 0x00, 0x01, 0xc8, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x8e, 0x8a, 0x17, 0x02, 0xc8, 0x01, 0x1c, 0x9d, 0xc8, 0x00, 0x00, 0x01, 0xc8, 0x00, 0x3f, 0xe1,
        0xee, 0x88, 0x39, 0x40, 0xc8, 0x01, 0x1c, 0x9d, 0xc8, 0x00, 0x00, 0x29, 0xc8, 0x00, 0xbf, 0xe1,
        0x0e, 0x06, 0x04, 0x40, 0xc9, 0x14, 0x1c, 0x9d, 0x00, 0x02, 0x00, 0x00, 0xaa, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xce, 0x82, 0x39, 0x40, 0xc8, 0x01, 0x1c, 0x9d, 0xc8, 0x00, 0x00, 0x29, 0xc8, 0x00, 0xbf, 0xe1,
        0x0e, 0x80, 0x02, 0x40, 0x93, 0x04, 0x1c, 0x9d, 0xa5, 0x10, 0x00, 0x01, 0xc8, 0x00, 0x00, 0x01,
        0x0e, 0x8a, 0x04, 0x40, 0xa5, 0x04, 0x1c, 0x9d, 0x93, 0x10, 0x00, 0x01, 0xc9, 0x00, 0x00, 0x03,
        0x9e, 0x80, 0x17, 0x00, 0xc8, 0x01, 0x1c, 0x9d, 0xc8, 0x00, 0x00, 0x01, 0xc8, 0x00, 0x3f, 0xe1,
        0x0e, 0x8c, 0x39, 0x40, 0xc8, 0x0c, 0x1c, 0x9d, 0xc8, 0x00, 0x00, 0x29, 0xc8, 0x00, 0x00, 0x01,
        0x0e, 0x8e, 0x02, 0x40, 0xab, 0x18, 0x1c, 0x9c, 0xc9, 0x14, 0x00, 0x01, 0xc8, 0x00, 0x00, 0x01,
        0x0e, 0x88, 0x04, 0x40, 0x01, 0x18, 0x1c, 0x9c, 0xc9, 0x10, 0x00, 0x01, 0xc9, 0x1c, 0x00, 0x01,
        0x10, 0x04, 0x02, 0x00, 0x00, 0x02, 0x1c, 0x9c, 0x00, 0x02, 0x00, 0x00, 0xc8, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x0e, 0x82, 0x04, 0x40, 0x55, 0x18, 0x1c, 0x9d, 0xc9, 0x04, 0x00, 0x01, 0xc9, 0x10, 0x00, 0x01,
        0x1e, 0x80, 0x02, 0x40, 0xc9, 0x00, 0x1c, 0x9d, 0xc8, 0x02, 0x00, 0x01, 0xc8, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x04, 0x04, 0x04, 0x00, 0xaa, 0x02, 0x1c, 0x9c, 0xaa, 0x02, 0x00, 0x00, 0xfe, 0x08, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x02, 0x04, 0x3a, 0x00, 0xfe, 0x08, 0x1c, 0x9d, 0xaa, 0x08, 0x00, 0x00, 0xc8, 0x00, 0x00, 0x01,
        0x10, 0x04, 0x3a, 0x00, 0xc8, 0x04, 0x1c, 0x9d, 0xaa, 0x08, 0x00, 0x02, 0xc8, 0x00, 0x00, 0x01,
        0x02, 0x82, 0x05, 0x40, 0xc8, 0x04, 0x1c, 0x9d, 0xc9, 0x04, 0x00, 0x01, 0xc8, 0x00, 0x00, 0x01,
        0x02, 0x82, 0xbb, 0x00, 0xc9, 0x04, 0x1c, 0x9d, 0xfe, 0x04, 0x00, 0x01, 0xc8, 0x00, 0x00, 0x01,
        0x02, 0x04, 0x03, 0x00, 0xc8, 0x08, 0x1c, 0x9d, 0x00, 0x02, 0x00, 0x00, 0xc8, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x10, 0x84, 0x83, 0x00, 0xc8, 0x08, 0x1c, 0x9d, 0x00, 0x08, 0x00, 0x00, 0xc8, 0x00, 0x00, 0x01,
        0x0e, 0x82, 0x02, 0x40, 0x01, 0x04, 0x1c, 0x9c, 0xc8, 0x02, 0x00, 0x01, 0xc8, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x0e, 0x82, 0x04, 0x40, 0xc9, 0x04, 0x1c, 0x9d, 0xff, 0x08, 0x00, 0x01, 0xc8, 0x02, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x0e, 0x82, 0x04, 0x40, 0xc9, 0x04, 0x1c, 0x9d, 0x00, 0x02, 0x00, 0x00, 0xff, 0x04, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x10, 0x82, 0x01, 0x40, 0xaa, 0x02, 0x1c, 0x9c, 0xc8, 0x00, 0x00, 0x01, 0xc8, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x1e, 0x01, 0x02, 0x40, 0xc9, 0x00, 0x1c, 0x9d, 0xc9, 0x04, 0x00, 0x01, 0xc8, 0x00, 0x00, 0x01,
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    };

    auto setConst = [&](int n, std::array<float, 4> val) {
        union {
            std::array<float, 4> f;
            std::array<uint8_t, 16> u8;
        } u;
        u.f = val;
        auto ptr = raw + 16 * n;
        for (auto i = 0u; i < sizeof(u); i += 4) {
            ptr[i + 1] = u.u8[i + 0];
            ptr[i + 0] = u.u8[i + 1];
            ptr[i + 3] = u.u8[i + 2];
            ptr[i + 2] = u.u8[i + 3];
        }
    };

    auto hash = XXH64(raw, sizeof(raw) - 16, 0);

    setConst(1, {0, 5, 10, 20});
    setConst(4, {1, 2, 3, 4});
    setConst(8, {11, 12, 13, 14});

    std::vector<std::array<float, 4>> vals(50);

    FragmentShaderCache cache;
    auto key = cache.unzip(raw, &vals[0], true);
    REQUIRE( key.hash == hash );
    REQUIRE( key.size == sizeof(raw) - 16 );
    REQUIRE( key.constCount == 11 );
    REQUIRE( key.mrt == true );
    REQUIRE( (vals[0] == std::array<float, 4>{0, 5, 10, 20}) );
    REQUIRE( (vals[1] == std::array<float, 4>{1, 2, 3, 4}) );
    REQUIRE( (vals[2] == std::array<float, 4>{11, 12, 13, 14}) );
    for (auto i = 3u; i < key.constCount; ++i) {
        REQUIRE( (vals[i] == std::array<float, 4>{0, 0, 0, 0}) );
    }

    auto shader = new FragmentShader();
    cache.insert(key, shader);

    auto badKey = key;
    badKey.mrt = false;
    auto retrievedShader = cache.retrieve(badKey);
    REQUIRE( retrievedShader == nullptr );
    retrievedShader = cache.retrieve(key);
    REQUIRE( retrievedShader == shader );
}
